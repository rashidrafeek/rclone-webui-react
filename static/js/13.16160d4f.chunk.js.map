{"version":3,"sources":["../node_modules/reactstrap/es/Button.js","../node_modules/reactstrap/es/Card.js","../node_modules/reactstrap/es/CardBody.js","actions/configActions.js","../node_modules/reactstrap/es/CardHeader.js","../node_modules/reactstrap/es/FormFeedback.js","../node_modules/reactstrap/es/Collapse.js","views/Base/NewDriveAuthModal/NewDriveAuthModal.js","views/RemoteManagement/NewDrive/ProviderAutoSuggest.js","views/RemoteManagement/NewDrive/NewDrive.js"],"names":["_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__","_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__","_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_4__","react__WEBPACK_IMPORTED_MODULE_4___default","n","prop_types__WEBPACK_IMPORTED_MODULE_5__","prop_types__WEBPACK_IMPORTED_MODULE_5___default","classnames__WEBPACK_IMPORTED_MODULE_6__","classnames__WEBPACK_IMPORTED_MODULE_6___default","_utils__WEBPACK_IMPORTED_MODULE_7__","propTypes","active","a","bool","aria-label","string","block","color","disabled","outline","tag","innerRef","oneOfType","object","func","onClick","size","children","node","className","cssModule","close","Button","_React$Component","props","_this","call","this","bind","Object","_proto","prototype","e","preventDefault","render","_this$props","ariaLabel","Tag","attributes","createElement","aria-hidden","btnOutlineColor","classes","href","defaultAriaLabel","type","undefined","ref","Component","defaultProps","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","prop_types__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_3___default","classnames__WEBPACK_IMPORTED_MODULE_4__","classnames__WEBPACK_IMPORTED_MODULE_4___default","_utils__WEBPACK_IMPORTED_MODULE_5__","inverse","body","Card","CardBody","d","getProviders","getConfigDump","_utils_API_API__WEBPACK_IMPORTED_MODULE_0__","_types__WEBPACK_IMPORTED_MODULE_1__","_utils_API_endpoint__WEBPACK_IMPORTED_MODULE_2__","dispatch","axiosInstance","post","urls","then","res","GET_PROVIDERS","payload","data","providers","GET_CONFIG_DUMP","status","REQUEST_SUCCESS","error","REQUEST_ERROR","CardHeader","valid","tooltip","FormFeedback","validMode","_transitionStatusToCl","esm_objectSpread","react_transition_group","isOpen","prop_types_default","arrayOf","utils","navbar","appear","enter","exit","timeout","Collapse","transitionStatusToClassHash","ENTERING","ENTERED","EXITING","EXITED","getHeight","scrollHeight","Collapse_Collapse","_Component","state","height","forEach","name","esm_assertThisInitialized","inheritsLoose","onEntering","isAppearing","setState","onEntered","onExit","onExiting","offsetHeight","onExited","_this2","otherProps","objectWithoutPropertiesLoose","transitionProps","childProps","react_default","esm_extends","in","collapseClass","getTransitionClass","classnames_default","style","react","es_Collapse","NewDriveAuthModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","toggle","assertThisInitialized","closeModal","isVisible","ErrorBoundary","Modal","ModalHeader","data-test","ModalBody","ModalFooter","React","getSuggestions","config","value","inputValue","trim","toLowerCase","inputLength","length","filter","lang","Description","slice","getSuggestionValue","suggestion","Prefix","renderSuggestion","ProviderAutoSuggest","onSuggestionsFetchRequested","_ref","suggestions","onSuggestionsClearRequested","onChange","currentConfig","findFromConfig","inputProps","placeholder","dist_default","alwaysRenderSuggestions","highlightFirstSuggestion","DriveParameters","drivePrefix","loadAdvanced","changeHandler","currentValues","isValidMap","errorsMap","currentProvider","outputMap","Options","map","attr","idx","Hide","Advanced","labelValue","concat","Help","requiredValue","Required","hasExamples","isEmpty","Examples","examplesMap","inputType","IsPassword","Type","key","FormGroup","row","Label","for","Name","sm","Col","Input","invalid","id","required","CustomInput","_ref2","label","_ref2$isValid","isValid","NewDrive","context","target","defineProperty","handleInputChange","inputName","optionTypes","formValues","objectSpread","validateResult","validateSizeSuffix","validateDuration","validateInt","prevState","formErrors","changeDriveType","event","_ref3","newValue","val","availableOptions","item","DefaultStr","openSetupDrive","colSetup","setupDriveDiv","scrollIntoView","behavior","editAdvancedOptions","advancedOptions","clearForm","driveName","changeName","driveNameIsEditable","console","log","driveNameIsValid","getConfigForRemote","response","errors","openAdvancedSettings","colAdvanced","configEndDiv","colRconfig","formValuesValid","authModalIsVisible","configCheckInterval","handleSubmit","toggleAuthModal","startAuthentication","checkConfigStatus","clearInterval","history","push","toast","_context","t0","autoClose","_this$state","flag","_i","_Object$entries","entries","_ref6","_ref5","slicedToArray","setInterval","NEW_DRIVE_CONFIG_REFRESH_TIMEOUT","validateForm","defaults","finalParameterValues","defaultValueObj","find","ele","array","parameters","match","params","createConfig","info","updateConfig","_context2","stopAuthentication","warn","_this3","_this$state3","Form","onSubmit","marginBottom","NewDrive_ProviderAutoSuggest","CardFooter","el","Base_NewDriveAuthModal_NewDriveAuthModal","isEdit","connect"],"mappings":"2FAAA,IAAAA,EAAAC,EAAA,GAAAC,EAAAD,EAAA,IAAAE,EAAAF,EAAA,KAAAG,EAAAH,EAAA,IAAAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAAM,EAAAF,GAAAG,EAAAP,EAAA,GAAAQ,EAAAR,EAAAM,EAAAC,GAAAE,EAAAT,EAAA,IAAAU,EAAAV,EAAAM,EAAAG,GAAAE,EAAAX,EAAA,IAQAY,EAAA,CACAC,OAAUL,EAAAM,EAASC,KACnBC,aAAgBR,EAAAM,EAASG,OACzBC,MAASV,EAAAM,EAASC,KAClBI,MAASX,EAAAM,EAASG,OAClBG,SAAYZ,EAAAM,EAASC,KACrBM,QAAWb,EAAAM,EAASC,KACpBO,IAAOX,EAAA,EACPY,SAAYf,EAAAM,EAASU,UAAA,CAAYhB,EAAAM,EAASW,OAASjB,EAAAM,EAASY,KAAOlB,EAAAM,EAASG,SAC5EU,QAAWnB,EAAAM,EAASY,KACpBE,KAAQpB,EAAAM,EAASG,OACjBY,SAAYrB,EAAAM,EAASgB,KACrBC,UAAavB,EAAAM,EAASG,OACtBe,UAAaxB,EAAAM,EAASW,OACtBQ,MAASzB,EAAAM,EAASC,MAOlBmB,EAEA,SAAAC,GAGA,SAAAD,EAAAE,GACA,IAAAC,EAIA,OAFAA,EAAAF,EAAAG,KAAAC,KAAAH,IAAAG,MACAZ,QAAAU,EAAAV,QAAAa,KAAuCC,OAAAvC,EAAA,EAAAuC,CAAsBJ,IAC7DA,EAPEI,OAAAtC,EAAA,EAAAsC,CAAcP,EAAAC,GAUhB,IAAAO,EAAAR,EAAAS,UAyDA,OAvDAD,EAAAf,QAAA,SAAAiB,GACAL,KAAAH,MAAAhB,SACAwB,EAAAC,iBAIAN,KAAAH,MAAAT,SACAY,KAAAH,MAAAT,QAAAiB,IAIAF,EAAAI,OAAA,WACA,IAAAC,EAAAR,KAAAH,MACAvB,EAAAkC,EAAAlC,OACAmC,EAAAD,EAAA,cACA7B,EAAA6B,EAAA7B,MACAa,EAAAgB,EAAAhB,UACAE,EAAAc,EAAAd,MACAD,EAAAe,EAAAf,UACAb,EAAA4B,EAAA5B,MACAE,EAAA0B,EAAA1B,QACAO,EAAAmB,EAAAnB,KACAqB,EAAAF,EAAAzB,IACAC,EAAAwB,EAAAxB,SACA2B,EAAqBT,OAAAxC,EAAA,EAAAwC,CAA6BM,EAAA,2GAElDd,GAAA,qBAAAiB,EAAArB,WACAqB,EAAArB,SAA4BxB,EAAAS,EAAKqC,cAAA,QACjCC,eAAA,GACO,SAGP,IAAAC,EAAA,OAAAhC,EAAA,mBAAAF,EACAmC,EAAkBb,OAAA9B,EAAA,EAAA8B,CAAgB/B,IAAUqB,EAAA,CAC5CE,SACKA,GAAA,MAAAA,GAAAoB,IAAAzB,GAAA,OAAAA,IAAAV,GAAA,aACLL,SACAO,SAAAmB,KAAAH,MAAAhB,WACKY,GAELkB,EAAAK,MAAA,WAAAN,IACAA,EAAA,KAGA,IAAAO,EAAAvB,EAAA,aACA,OAAW5B,EAAAS,EAAKqC,cAAAF,EAAoBR,OAAA1C,EAAA,EAAA0C,CAAQ,CAC5CgB,KAAA,WAAAR,GAAAC,EAAAvB,QAAA,cAAA+B,GACKR,EAAA,CACLnB,UAAAuB,EACAK,IAAApC,EACAI,QAAAY,KAAAZ,QACAX,aAAAgC,GAAAQ,MAIAtB,EApEA,CAqEE7B,EAAAS,EAAK8C,WAEP1B,EAAAtB,YACAsB,EAAA2B,aA/EA,CACA1C,MAAA,YACAG,IAAA,UA8EewC,EAAA,sCCxGf,IAAA/D,EAAAC,EAAA,GAAAC,EAAAD,EAAA,IAAA+D,EAAA/D,EAAA,GAAAgE,EAAAhE,EAAAM,EAAAyD,GAAAE,EAAAjE,EAAA,GAAAkE,EAAAlE,EAAAM,EAAA2D,GAAAE,EAAAnE,EAAA,IAAAoE,EAAApE,EAAAM,EAAA6D,GAAAE,EAAArE,EAAA,IAMAY,EAAA,CACAU,IAAO+C,EAAA,EACPC,QAAWJ,EAAApD,EAASC,KACpBI,MAAS+C,EAAApD,EAASG,OAClBsD,KAAQL,EAAApD,EAASC,KACjBM,QAAW6C,EAAApD,EAASC,KACpBgB,UAAamC,EAAApD,EAASG,OACtBe,UAAakC,EAAApD,EAASW,OACtBF,SAAY2C,EAAApD,EAASU,UAAA,CAAY0C,EAAApD,EAASW,OAASyC,EAAApD,EAASG,OAASiD,EAAApD,EAASY,QAM9E8C,EAAA,SAAApC,GACA,IAAAL,EAAAK,EAAAL,UACAC,EAAAI,EAAAJ,UACAb,EAAAiB,EAAAjB,MACAoD,EAAAnC,EAAAmC,KACAD,EAAAlC,EAAAkC,QACAjD,EAAAe,EAAAf,QACA4B,EAAAb,EAAAd,IACAC,EAAAa,EAAAb,SACA2B,EAAmBT,OAAAxC,EAAA,EAAAwC,CAA6BL,EAAA,+EAEhDkB,EAAgBb,OAAA4B,EAAA,EAAA5B,CAAgB2B,IAAUrC,EAAA,SAAAuC,GAAA,eAAAC,GAAA,cAAApD,IAAAE,EAAA,mBAAAF,GAAAa,GAC1C,OAASgC,EAAAlD,EAAKqC,cAAAF,EAAoBR,OAAA1C,EAAA,EAAA0C,CAAQ,GAAGS,EAAA,CAC7CnB,UAAAuB,EACAK,IAAApC,MAIAiD,EAAA5D,YACA4D,EAAAX,aAvBA,CACAvC,IAAA,OAuBewC,EAAA,sCCxCf,IAAA/D,EAAAC,EAAA,GAAAC,EAAAD,EAAA,IAAA+D,EAAA/D,EAAA,GAAAgE,EAAAhE,EAAAM,EAAAyD,GAAAE,EAAAjE,EAAA,GAAAkE,EAAAlE,EAAAM,EAAA2D,GAAAE,EAAAnE,EAAA,IAAAoE,EAAApE,EAAAM,EAAA6D,GAAAE,EAAArE,EAAA,IAMAY,EAAA,CACAU,IAAO+C,EAAA,EACPtC,UAAamC,EAAApD,EAASG,OACtBe,UAAakC,EAAApD,EAASW,OACtBF,SAAY2C,EAAApD,EAASU,UAAA,CAAY0C,EAAApD,EAASW,OAASyC,EAAApD,EAASG,OAASiD,EAAApD,EAASY,QAM9E+C,EAAA,SAAArC,GACA,IAAAL,EAAAK,EAAAL,UACAC,EAAAI,EAAAJ,UACAT,EAAAa,EAAAb,SACA0B,EAAAb,EAAAd,IACA4B,EAAmBT,OAAAxC,EAAA,EAAAwC,CAA6BL,EAAA,4CAEhDkB,EAAgBb,OAAA4B,EAAA,EAAA5B,CAAgB2B,IAAUrC,EAAA,aAAAC,GAC1C,OAASgC,EAAAlD,EAAKqC,cAAAF,EAAoBR,OAAA1C,EAAA,EAAA0C,CAAQ,GAAGS,EAAA,CAC7CnB,UAAAuB,EACAK,IAAApC,MAIAkD,EAAA7D,YACA6D,EAAAZ,aAnBA,CACAvC,IAAA,OAmBewC,EAAA,sCChCf9D,EAAA0E,EAAAZ,EAAA,sBAAAa,IAAA3E,EAAA0E,EAAAZ,EAAA,sBAAAc,IAAA,IAAAC,EAAA7E,EAAA,KAAA8E,EAAA9E,EAAA,GAAA+E,EAAA/E,EAAA,IASa2E,EAAe,kBAAM,SAAAK,GAC9BC,IAAcC,KAAKC,IAAKR,cAAcS,KAAK,SAAAC,GAAG,OAAIL,EAAS,CACvDvB,KAAM6B,IACNC,QAASF,EAAIG,KAAKC,gBAObb,EAAgB,kBAAM,SAAAI,GAC/BC,IAAcC,KAAKC,IAAKP,eAAeQ,KAAK,SAAAC,GAAG,OAAIL,EAAS,CACxDvB,KAAMiC,IACNC,OAAQC,IACRL,QAASF,EAAIG,QACb,SAAAK,GAAK,OAAIb,EAAS,CAClBvB,KAAMiC,IACNC,OAAQG,IACRP,QAASM,0CC3BjB,IAAA9F,EAAAC,EAAA,GAAAC,EAAAD,EAAA,IAAA+D,EAAA/D,EAAA,GAAAgE,EAAAhE,EAAAM,EAAAyD,GAAAE,EAAAjE,EAAA,GAAAkE,EAAAlE,EAAAM,EAAA2D,GAAAE,EAAAnE,EAAA,IAAAoE,EAAApE,EAAAM,EAAA6D,GAAAE,EAAArE,EAAA,IAMAY,EAAA,CACAU,IAAO+C,EAAA,EACPtC,UAAamC,EAAApD,EAASG,OACtBe,UAAakC,EAAApD,EAASW,QAMtBsE,EAAA,SAAA3D,GACA,IAAAL,EAAAK,EAAAL,UACAC,EAAAI,EAAAJ,UACAiB,EAAAb,EAAAd,IACA4B,EAAmBT,OAAAxC,EAAA,EAAAwC,CAA6BL,EAAA,iCAEhDkB,EAAgBb,OAAA4B,EAAA,EAAA5B,CAAgB2B,IAAUrC,EAAA,eAAAC,GAC1C,OAASgC,EAAAlD,EAAKqC,cAAAF,EAAoBR,OAAA1C,EAAA,EAAA0C,CAAQ,GAAGS,EAAA,CAC7CnB,UAAAuB,MAIAyC,EAAAnF,YACAmF,EAAAlC,aAjBA,CACAvC,IAAA,OAiBewC,EAAA,sCC7Bf,IAAA/D,EAAAC,EAAA,GAAAC,EAAAD,EAAA,IAAA+D,EAAA/D,EAAA,GAAAgE,EAAAhE,EAAAM,EAAAyD,GAAAE,EAAAjE,EAAA,GAAAkE,EAAAlE,EAAAM,EAAA2D,GAAAE,EAAAnE,EAAA,IAAAoE,EAAApE,EAAAM,EAAA6D,GAAAE,EAAArE,EAAA,IAMAY,EAAA,CACAiB,SAAYqC,EAAApD,EAASgB,KACrBR,IAAO+C,EAAA,EACPtC,UAAamC,EAAApD,EAASG,OACtBe,UAAakC,EAAApD,EAASW,OACtBuE,MAAS9B,EAAApD,EAASC,KAClBkF,QAAW/B,EAAApD,EAASC,MAEpB8C,EAAA,CACAvC,IAAA,MACA0E,WAAAtC,GAGAwC,EAAA,SAAA9D,GACA,IAAAL,EAAAK,EAAAL,UACAC,EAAAI,EAAAJ,UACAgE,EAAA5D,EAAA4D,MACAC,EAAA7D,EAAA6D,QACAhD,EAAAb,EAAAd,IACA4B,EAAmBT,OAAAxC,EAAA,EAAAwC,CAA6BL,EAAA,mDAEhD+D,EAAAF,EAAA,qBACA3C,EAAgBb,OAAA4B,EAAA,EAAA5B,CAAgB2B,IAAUrC,EAAAiE,EAAA,SAAAG,EAAA,WAAAA,GAAAnE,GAC1C,OAASgC,EAAAlD,EAAKqC,cAAAF,EAAoBR,OAAA1C,EAAA,EAAA0C,CAAQ,GAAGS,EAAA,CAC7CnB,UAAAuB,MAIA4C,EAAAtF,YACAsF,EAAArC,eACeC,EAAA,iDC9BfsC,iSAQAxF,EAAgB6B,OAAA4D,EAAA,EAAA5D,CAAa,GAAK6D,EAAA,WAAU1F,UAAA,CAC5C2F,OAAUC,EAAA1F,EAASC,KACnBc,SAAY2E,EAAA1F,EAASU,UAAA,CAAYgF,EAAA1F,EAAS2F,QAASD,EAAA1F,EAASgB,MAAQ0E,EAAA1F,EAASgB,OAC7ER,IAAOoF,EAAA,EACP3E,UAAayE,EAAA1F,EAASgB,KACtB6E,OAAUH,EAAA1F,EAASC,KACnBiB,UAAawE,EAAA1F,EAASW,OACtBF,SAAYiF,EAAA1F,EAASU,UAAA,CAAYgF,EAAA1F,EAASY,KAAO8E,EAAA1F,EAASG,OAASuF,EAAA1F,EAASW,WAG5EoC,EAAmBpB,OAAA4D,EAAA,EAAA5D,CAAa,GAAK6D,EAAA,WAAUzC,aAAA,CAC/C0C,QAAA,EACAK,QAAA,EACAC,OAAA,EACAC,MAAA,EACAxF,IAAA,MACAyF,QAAWL,EAAA,EAAkBM,WAG7BC,IAAAb,EAAA,IAAqFM,EAAA,EAAkBQ,UAAA,aAAAd,EAAiDM,EAAA,EAAkBS,SAAA,gBAAAf,EAAmDM,EAAA,EAAkBU,SAAA,aAAAhB,EAAgDM,EAAA,EAAkBW,QAAA,WAAAjB,GAMjT,SAAAkB,EAAAxF,GACA,OAAAA,EAAAyF,aAGA,IAAIC,EAEJ,SAAAC,GAGA,SAAAT,EAAA5E,GACA,IAAAC,EASA,OAPAA,EAAAoF,EAAAnF,KAAAC,KAAAH,IAAAG,MACAmF,MAAA,CACAC,OAAA,MAEA,2DAAAC,QAAA,SAAAC,GACAxF,EAAAwF,GAAAxF,EAAAwF,GAAArF,KAAqCC,OAAAqF,EAAA,EAAArF,CAAsBJ,MAE3DA,EAZEI,OAAAsF,EAAA,EAAAtF,CAAcuE,EAAAS,GAehB,IAAA/E,EAAAsE,EAAArE,UA6EA,OA3EAD,EAAAsF,WAAA,SAAAlG,EAAAmG,GACA1F,KAAA2F,SAAA,CACAP,OAAAL,EAAAxF,KAEAS,KAAAH,MAAA4F,WAAAlG,EAAAmG,IAGAvF,EAAAyF,UAAA,SAAArG,EAAAmG,GACA1F,KAAA2F,SAAA,CACAP,OAAA,OAEApF,KAAAH,MAAA+F,UAAArG,EAAAmG,IAGAvF,EAAA0F,OAAA,SAAAtG,GACAS,KAAA2F,SAAA,CACAP,OAAAL,EAAAxF,KAEAS,KAAAH,MAAAgG,OAAAtG,IAGAY,EAAA2F,UAAA,SAAAvG,GAEAA,EAAAwG,aAEA/F,KAAA2F,SAAA,CACAP,OAAA,IAEApF,KAAAH,MAAAiG,UAAAvG,IAGAY,EAAA6F,SAAA,SAAAzG,GACAS,KAAA2F,SAAA,CACAP,OAAA,OAEApF,KAAAH,MAAAmG,SAAAzG,IAGAY,EAAAI,OAAA,WACA,IAAA0F,EAAAjG,KAEAQ,EAAAR,KAAAH,MACAa,EAAAF,EAAAzB,IACAiF,EAAAxD,EAAAwD,OACAxE,EAAAgB,EAAAhB,UACA4E,EAAA5D,EAAA4D,OACA3E,EAAAe,EAAAf,UACAH,EAAAkB,EAAAlB,SAEA4G,GADA1F,EAAAxB,SACqBkB,OAAAiG,EAAA,EAAAjG,CAA6BM,EAAA,0EAElD4E,EAAApF,KAAAmF,MAAAC,OACAgB,EAA0BlG,OAAAiE,EAAA,EAAAjE,CAAIgG,EAAa/B,EAAA,GAC3CkC,EAAqBnG,OAAAiE,EAAA,EAAAjE,CAAIgG,EAAa/B,EAAA,GACtC,OAAWmC,EAAA/H,EAAKqC,cAAemD,EAAA,WAAY7D,OAAAqG,EAAA,EAAArG,CAAQ,GAAGkG,EAAA,CACtDI,GAAAxC,EACAyB,WAAAzF,KAAAyF,WACAG,UAAA5F,KAAA4F,UACAC,OAAA7F,KAAA6F,OACAC,UAAA9F,KAAA8F,UACAE,SAAAhG,KAAAgG,WACK,SAAA5C,GACL,IAAAqD,EA1FA,SAAArD,GACA,OAAAsB,EAAAtB,IAAA,WAyFAsD,CAAAtD,GACArC,EAAoBb,OAAAiE,EAAA,EAAAjE,CAAgByG,IAAUnH,EAAAiH,EAAArC,GAAA,mBAAA3E,GAC9CmH,EAAA,OAAAxB,EAAA,MACAA,UAEA,OAAakB,EAAA/H,EAAKqC,cAAAF,EAAoBR,OAAAqG,EAAA,EAAArG,CAAQ,GAAGmG,EAAA,CACjDO,MAAe1G,OAAA4D,EAAA,EAAA5D,CAAa,GAAGmG,EAAAO,SAC/BpH,UAAAuB,EACAK,IAAA6E,EAAApG,MAAAb,WACOM,MAIPmF,EA7FA,CA8FEoC,EAAA,WAEF5B,EAAQ5G,YACR4G,EAAQ3D,eACO,IAAAwF,EAAA,iECzITC,cAEF,SAAAA,EAAYlH,GAAO,IAAAC,EAAA,OAAAI,OAAA8G,EAAA,EAAA9G,CAAAF,KAAA+G,IACfjH,EAAAI,OAAA+G,EAAA,EAAA/G,CAAAF,KAAAE,OAAAgH,EAAA,EAAAhH,CAAA6G,GAAAhH,KAAAC,KAAMH,KAEDsH,OAASrH,EAAKqH,OAAOlH,KAAZC,OAAAkH,EAAA,EAAAlH,CAAAJ,IAHCA,wEAOfE,KAAKH,MAAMwH,8CAIN,IACEC,EAAatH,KAAKH,MAAlByH,UACP,OACIhB,EAAA/H,EAAAqC,cAAA,WACI0F,EAAA/H,EAAAqC,cAAC2G,EAAA,EAAD,KACIjB,EAAA/H,EAAAqC,cAAC4G,EAAA,EAAD,CAAOxD,OAAQsD,EAAWH,OAAQnH,KAAKmH,QACnCb,EAAA/H,EAAAqC,cAAC6G,EAAA,EAAD,CAAaN,OAAQnH,KAAKmH,OAAQO,YAAU,eAA5C,2BACApB,EAAA/H,EAAAqC,cAAC+G,EAAA,EAAD,CAAWD,YAAU,aAArB,mIAKApB,EAAA/H,EAAAqC,cAACgH,EAAA,EAAD,CAAaF,YAAU,eACnBpB,EAAA/H,EAAAqC,cAACjB,EAAA,EAAD,CAAQf,MAAM,UAAUQ,QAASY,KAAKmH,QAAtC,QAA4D,eA1BxDU,IAAMxG,WAwCtC0F,EAAkBzF,aAAe,CAC7BgG,WAAW,GAIAP,gDC9CTe,GAAiB,SAACC,EAAQC,GAC5B,IAAMC,EAAaD,EAAME,OAAOC,cAC1BC,EAAcH,EAAWI,OAE/B,OAAoB,IAAhBD,EACOL,EAIY,IAAhBK,EAAoB,GAAKL,EAAOO,OAAO,SAAAC,GAAI,OAC9CA,EAAKC,YAAYL,cAAcM,MAAM,EAAGL,KAAiBH,KAO3DS,GAAqB,SAAAC,GAAU,OAAIA,EAAWC,QAG9CC,GAAmB,SAAAF,GAAU,OAC/BrC,EAAA/H,EAAAqC,cAAA,WACK+H,EAAWH,cAqELM,eAhEX,SAAAA,EAAYjJ,GAAO,IAAAC,EAAA,OAAAI,OAAA8G,EAAA,EAAA9G,CAAAF,KAAA8I,IACfhJ,EAAAI,OAAA+G,EAAA,EAAA/G,CAAAF,KAAAE,OAAAgH,EAAA,EAAAhH,CAAA4I,GAAA/I,KAAAC,KAAMH,KAeVkJ,4BAA8B,SAAAC,GAAa,IAAXhB,EAAWgB,EAAXhB,MAE5BlI,EAAK6F,SAAS,CACVsD,YAAanB,GAAehI,EAAKD,MAAMoJ,YAAajB,MAnBzClI,EAwBnBoJ,4BAA8B,WAC1BpJ,EAAK6F,SAAS,CACVsD,YAAa,MAlBjBnJ,EAAKqF,MAAQ,CACT8D,YAAa,IATFnJ,wEA+BV,IAAAU,EACkCR,KAAKH,MAArCmI,EADFxH,EACEwH,MAAOmB,EADT3I,EACS2I,SAAUF,EADnBzI,EACmByI,YAClBG,EAAgBC,aAAeJ,EAAajB,GAS5CsB,EAAa,CACfC,YAAa,uBACbvB,WATkB7G,IAAlBiI,EACYpB,EAEAoB,EAAcZ,YAO1BW,SAAUA,GAId,OACI7C,EAAA/H,EAAAqC,cAAC4I,GAAAjL,EAAD,CACI0K,YAAajJ,KAAKmF,MAAM8D,YACxBF,4BAA6B/I,KAAK+I,4BAClCG,4BAA6BlJ,KAAKkJ,4BAClCR,mBAAoBA,GACpBG,iBAAkBA,GAClBY,yBAAyB,EACzBC,0BAA0B,EAC1BJ,WAAYA,WA3DMzB,IAAMxG,2DCUxC,SAASsI,GAATX,GAAmH,IAAzFY,EAAyFZ,EAAzFY,YAAaC,EAA4Eb,EAA5Ea,aAAcC,EAA8Dd,EAA9Dc,cAAeC,EAA+Cf,EAA/Ce,cAAeC,EAAgChB,EAAhCgB,WAAYC,EAAoBjB,EAApBiB,UAAWlC,EAASiB,EAATjB,OACtG,QAAoB5G,IAAhByI,GAA6C,KAAhBA,EAAoB,CACjD,IAAMM,EAAkBb,aAAetB,EAAQ6B,GAC3CO,EAAY,GAChB,QAAwBhJ,IAApB+I,EAyBAC,EAxBkBD,EAAgBE,QAwBZC,IAAI,SAACC,EAAMC,GAC7B,GAAkB,IAAdD,EAAKE,OAAgBX,GAAgBS,EAAKG,WAAeZ,IAAiBS,EAAKG,UAAY,CAC3F,IAAMC,EAAU,GAAAC,OAAML,EAAKM,MACrBC,EAAkBP,EAAKQ,SAAaxE,EAAA/H,EAAAqC,cAAA,KAAGpB,UAAW,YAAd,KAAmC,KAEvEuL,GAAeC,aAAQV,EAAKW,UAC9BC,EAAc,KAEdC,EAAY,GA2BhB,OAxBIb,EAAKc,WACLD,EAAY,WACLJ,EACPI,EAAY,SAIS,SAAdb,EAAKe,MACZF,EAAY,SACZD,EAAc,CACT5E,EAAA/H,EAAAqC,cAAA,UAAQ0K,IAAK,EAAGtD,OAAO,GAAvB,OACA1B,EAAA/H,EAAAqC,cAAA,UAAQ0K,IAAK,EAAGtD,OAAO,GAAvB,QAKDmD,EADc,QAAdb,EAAKe,KACO,UACLf,EAAKe,KACA,QAOhB/E,EAAA/H,EAAAqC,cAAC2K,EAAA,EAAD,CAAWD,IAAKf,EAAKiB,KAAG,GACpBlF,EAAA/H,EAAAqC,cAAC6K,EAAA,EAAD,CAAOC,IAAKpB,EAAKqB,KAAMC,GAAI,GAAIlB,EAAYG,GAC3CvE,EAAA/H,EAAAqC,cAACiL,EAAA,EAAD,CAAKD,GAAI,GACLtF,EAAA/H,EAAAqC,cAACkL,EAAA,EAAD,CAAO5K,KAAMiK,EAAWnD,MAAO+B,EAAcO,EAAKqB,MAC3CrG,KAAMgF,EAAKqB,KAAMlI,MAAOuG,EAAWM,EAAKqB,MAAOI,SAAU/B,EAAWM,EAAKqB,MACzEK,GAAI1B,EAAKqB,KAAMxC,SAAUW,EAAemC,SAAU3B,EAAKQ,UACzDI,GAEL5E,EAAA/H,EAAAqC,cAAC+C,EAAA,EAAD,KAAesG,EAAUK,EAAKqB,SAM1C,OAAO,OAInB,OAAOxB,EAEX,OACI7D,EAAA/H,EAAAqC,cAAA,8CA2BR,SAASsL,GAATC,GAAuG,IAAjFb,EAAiFa,EAAjFb,IAAKU,EAA4EG,EAA5EH,GAAII,EAAwED,EAAxEC,MAAOtC,EAAiEqC,EAAjErC,cAAe5I,EAAkDiL,EAAlDjL,KAAM8G,EAA4CmE,EAA5CnE,MAAO1C,EAAqC6G,EAArC7G,KAAMiE,EAA+B4C,EAA/B5C,YAA+B8C,EAAAF,EAAlBG,eAAkB,IAAAD,KACnG,OACI/F,EAAA/H,EAAAqC,cAAC2K,EAAA,EAAD,CAAWD,IAAKA,EAAKE,KAAG,GACpBlF,EAAA/H,EAAAqC,cAAC6K,EAAA,EAAD,CAAOC,IAAKM,EAAIJ,GAAI,GAAIQ,GACxB9F,EAAA/H,EAAAqC,cAACiL,EAAA,EAAD,CAAKD,GAAI,GACLtF,EAAA/H,EAAAqC,cAACkL,EAAA,EAAD,CAAO5K,KAAMA,EAAM8G,MAAOA,EAAO1C,KAAMA,EAAMiE,YAAaA,EACnDyC,GAAIA,EAAI7C,SAAUW,EAAerG,MAAO6I,EAASP,SAAUO,EAASL,UAAQ,IACnF3F,EAAA/H,EAAAqC,cAAC+C,EAAA,EAAD,CAAcF,OAAK,GAAnB,iCACA6C,EAAA/H,EAAAqC,cAAC+C,EAAA,EAAD,0DAQV4I,eAEF,SAAAA,EAAY1M,EAAO2M,GAAS,IAAA1M,EAAA,OAAAI,OAAA8G,EAAA,EAAA9G,CAAAF,KAAAuM,IACxBzM,EAAAI,OAAA+G,EAAA,EAAA/G,CAAAF,KAAAE,OAAAgH,EAAA,EAAAhH,CAAAqM,GAAAxM,KAAAC,KAAMH,EAAO2M,KAkCjBrF,OAAS,SAAC9G,GACN,IAAIiF,EAAOjF,EAAEoM,OAAOnH,KAEpBxF,EAAK6F,SAALzF,OAAAwM,EAAA,EAAAxM,CAAA,GAAgBoF,GAAQxF,EAAKqF,MAAMG,MAtCXxF,EAqE5B6M,kBAAoB,SAACtM,GAEjB,IAAIuM,EAAYvM,EAAEoM,OAAOnH,KACrB2C,EAAa5H,EAAEoM,OAAOzE,MACpBmD,EAAYrL,EAAKqF,MAAM0H,YAAYD,GACzC9M,EAAK6F,SAAS,CACVmH,WAAW5M,OAAA6M,EAAA,EAAA7M,CAAA,GACJJ,EAAKqF,MAAM2H,WADR5M,OAAAwM,EAAA,EAAAxM,CAAA,GAEL0M,EAAY3E,MAGrB,IAAI+E,GAAiB,EACjB1J,EAAQ,GACM,eAAd6H,GACA6B,EAAiBC,aAAmBhF,MAEhC3E,EAAQ,8EAES,aAAd6H,GACP6B,EAAiBE,aAAiBjF,MAE9B3E,EAAQ,yEAES,QAAd6H,KACP6B,EAAiBG,aAAYlF,MAEzB3E,EAAQ,8CAIZxD,EAAKqF,MAAM8G,SAASW,IAAgB3E,GAA6B,KAAfA,IAClD+E,GAAiB,KAEb1J,GAAS,2BAKjBxD,EAAK6F,SAAS,SAACyH,GACX,MAAO,CACHd,QAAQpM,OAAA6M,EAAA,EAAA7M,CAAA,GACDkN,EAAUd,QADVpM,OAAAwM,EAAA,EAAAxM,CAAA,GAEF0M,EAAYI,IAEjBK,WAAWnN,OAAA6M,EAAA,EAAA7M,CAAA,GACJkN,EAAUC,WADPnN,OAAAwM,EAAA,EAAAxM,CAAA,GAEL0M,EAAYtJ,QAnHDxD,EAgI5BwN,gBAAkB,SAACC,EAADC,GAAuB,IAAdC,EAAcD,EAAdC,SAEhBvK,EAAapD,EAAKD,MAAlBqD,UAEHwK,EAAMD,EAGNE,EAAmB,GACnBd,EAAc,GACdP,EAAU,GACVe,EAAa,GACbpB,EAAW,GAGf,QAAY9K,IAARuM,GAA6B,KAARA,EAAY,CAEjC,IAAMtE,EAAgBC,aAAenG,EAAWwK,QAC1BvM,IAAlBiI,GAEAA,EAAcgB,QAAQ/E,QAAQ,SAAAuI,GAAQ,IAE3BC,EAA0CD,EAA1CC,WAAYxC,EAA8BuC,EAA9BvC,KAAMM,EAAwBiC,EAAxBjC,KAAMb,EAAkB8C,EAAlB9C,SAClB,IADoC8C,EAARpD,OAErCmD,EAAiBhC,GAAQkC,EACzBhB,EAAYlB,GAAQN,EACpBY,EAASN,GAAQb,EAEjBwB,EAAQX,KAAUb,KAAc+C,GAA6B,KAAfA,IAE9CR,EAAW1B,GAAQ,MAI/B7L,EAAK6F,SAAS,CACViE,YAAa8D,EACbZ,WAAYa,EACZd,YAAaA,EACbP,QAASA,EACTe,WAAYA,EACZpB,SAAUA,SAGdnM,EAAK6F,SAAS,CAACiE,YAAa8D,KA1KR5N,EAkL5BgO,eAAiB,SAACzN,GACVA,GAAGA,EAAEC,iBACTR,EAAK6F,SAAS,CAACoI,UAAY,IAC3BjO,EAAKkO,cAAcC,eAAe,CAACC,SAAU,YArLrBpO,EA2L5BqO,oBAAsB,SAAC9N,GACnBP,EAAK6F,SAAS,CAACyI,iBAAkBtO,EAAKqF,MAAMiJ,mBA5LpBtO,EA8V5BuO,UAAY,SAAAhO,GACRP,EAAK6F,SAAS,CAAC2I,UAAW,GAAI1E,YAAa,MA/VnB9J,EAsW5ByO,WAAa,SAAAlO,GAAK,IACPmO,EAAuB1O,EAAKqF,MAA5BqJ,oBAEP,GADAC,QAAQC,IAAI,cACRF,EAAqB,CACrB,IAAMxG,EAAQ3H,EAAEoM,OAAOzE,MAEvBlI,EAAK6F,SAAS,CAAC2I,UAAWtG,GAAQ,gBAEhB7G,IAAV6G,GAAiC,KAAVA,EACvBlI,EAAK6F,SAAS,CAACgJ,kBAAkB,IAGjCjM,IAAcC,KAAKC,KAAKgM,mBAAoB,CAACtJ,KAAM0C,IAAQnF,KAAK,SAACgM,GAC7D,IAAIC,EAAShP,EAAKqF,MAAMkI,WACpBf,EAAUtB,aAAQ6D,EAAS5L,MAE3B6L,EAAM,UADNxC,EACsB,GAEA,YAG1BxM,EAAK6F,SAAS,CAAC0H,WAAYyB,EAAQH,iBAAkBrC,aAMjExM,EAAK6F,SAAS,SAACyH,GAAD,MAAgB,CAACC,WAAWnN,OAAA6M,EAAA,EAAA7M,CAAA,GAAKkN,EAAUC,WAAhB,CAA4BiB,UAAa,yBAjY9DxO,EAyY5BiP,qBAAuB,SAAA1O,GACfP,EAAKqF,MAAMiJ,gBACXtO,EAAK6F,SAAS,CAACqJ,aAAa,IAE5BlP,EAAKmP,aAAahB,eAAe,CAACC,SAAU,YA3YhDpO,EAAKqF,MAAQ,CAET+J,YAAY,EACZnB,UAAU,EACViB,aAAa,EACbV,UAAW,GACXE,qBAAqB,EAErBJ,iBAAiB,EACjBtB,WAAY,GACZqC,gBAAiB,GACjBlD,SAAU,GACVmD,oBAAoB,EAEpBxF,YAAa,GACb+E,kBAAkB,EAClBtB,WAAY,CAACiB,UAAW,IACxBzB,YAAa,GACbP,QAAS,IAGbxM,EAAKuP,oBAAsB,KAE3BvP,EAAKwP,aAAexP,EAAKwP,aAAarP,KAAlBC,OAAAkH,EAAA,EAAAlH,CAAAJ,IACpBA,EAAKyP,gBAAkBzP,EAAKyP,gBAAgBtP,KAArBC,OAAAkH,EAAA,EAAAlH,CAAAJ,IACvBA,EAAK0P,oBAAsB1P,EAAK0P,oBAAoBvP,KAAzBC,OAAAkH,EAAA,EAAAlH,CAAAJ,IAC3BA,EAAK2P,kBAAoB3P,EAAK2P,kBAAkBxP,KAAvBC,OAAAkH,EAAA,EAAAlH,CAAAJ,IA5BDA,0MA2CjBwO,EAAatO,KAAKmF,MAAlBmJ,4BAGa5L,IAAcC,KAAKC,KAAKgM,mBAAoB,CAACtJ,KAAMgJ,WAA/DxL,SAGCkI,aAAQlI,EAAIG,QAEbyM,cAAc1P,KAAKqP,qBACnBrP,KAAKqP,oBAAsB,KAC3BrP,KAAKuP,kBACLvP,KAAKH,MAAM8P,QAAQC,KAAK,+DAK5BC,KAAMvM,MAAN,0BAAAqH,OAAAmF,EAAAC,IAA2C,CACvCC,WAAW,sJAuIR,IAAAC,EAEsCjQ,KAAKmF,MAA/CwJ,EAFIsB,EAEJtB,iBAAkB/E,EAFdqG,EAEcrG,YAAa0C,EAF3B2D,EAE2B3D,QAClC4D,GAAO,EAENvB,IACDuB,GAAO,GAES,KAAhBtG,IACAsG,GAAO,GAKX,QAAAC,EAAA,EAAAC,EAA2BlQ,OAAOmQ,QAAQ/D,GAA1C6D,EAAAC,EAAA/H,OAAA8H,IAAoD,KAAAG,EAAAF,EAAAD,GAAAI,EAAArQ,OAAAsQ,EAAA,EAAAtQ,CAAAoQ,EAAA,GAAxChF,EAAwCiF,EAAA,GAAnCvI,EAAmCuI,EAAA,GAChD,IAAKjF,IAAQtD,EAAO,CAChBkI,GAAO,EACP,OAIR,OAAOA,4CAOPlQ,KAAK2F,SAAS,SAACR,EAAOtF,GAClB,MAAO,CAACuP,oBAAqBjK,EAAMiK,oEAQvCpP,KAAKuP,kBAE4B,OAA7BvP,KAAKqP,oBACLrP,KAAKqP,oBAAsBoB,YAAYzQ,KAAKyP,kBAAmBiB,MAE/DjC,QAAQnL,MAAM,qGASlBtD,KAAK2F,SAAS,SAACR,EAAOtF,GAClB,MAAO,CAACuP,oBAAoB,KAEhCM,cAAc1P,KAAKqP,kGAQJhP,kGACfA,EAAEC,mBAGgCN,KAAKmF,MAAhC2H,eAAYlD,gBACZ1G,EAAalD,KAAKH,MAAlBqD,WAGHlD,KAAK2Q,wCAEexP,IAAhByI,GAA6C,KAAhBA,2BAELzI,KADlB+I,EAAkBb,aAAenG,EAAW0G,qBAIxCgH,EAAW1G,EAAgBE,QAI7ByG,EAAuB,2BAGfvF,0BAAKtD,OAEb,GAAY,UAARsD,EAEA,OADAuF,EAAqBvF,GAAOtD,EAC5B,WAEJ,IAAM8I,EAAkBF,EAASG,KAAK,SAACC,EAAKzG,EAAK0G,GAE7C,OAAQ3F,IAAQ0F,EAAIrF,OAEpBmF,IAGI9I,IADiB8I,EAAdjD,aAGHgD,EAAqBvF,GAAOtD,WAfb9H,OAAOmQ,QAAQvD,wJAsBtC7J,EAAO,CACPiO,WAAYL,EAEZvL,KAAMtF,KAAKmF,MAAMmJ,UACjBpN,KAAMlB,KAAKmF,MAAMyE,aAKrB5J,KAAKwP,gCAEqBxP,KAAKH,MAAMsR,MAAMC,OAAhCxH,8CAIGlH,IAAcC,KAAKC,KAAKyO,aAAcpO,WAC5C4M,KAAMyB,KAAK,2DAEL5O,IAAcC,KAAKC,KAAK2O,aAActO,WAC5C4M,KAAMyB,KAAK,6EAIfzB,KAAMvM,MAAN,0BAAAqH,OAAA6G,EAAAzB,IAA6C,CACzCC,WAAW,IAEfhQ,KAAKyR,qDAMZzR,KAAKmF,MAAM4I,UACZ/N,KAAK8N,iBAGL9N,KAAKmF,MAAMiJ,kBAAoBpO,KAAKmF,MAAM6J,aAC1ChP,KAAK+O,uBAETc,KAAM6B,KAAN,sCAAkD,CAC9C1B,WAAW,8JAiEH,IAAA/J,EAAAjG,KACT4J,EAAe5J,KAAKH,MAAMsR,MAAMC,OAAhCxH,cAIF5J,KAAKH,MAAMqD,WAAalD,KAAKH,MAAMqD,UAAUmF,OAAS,IACvDrI,KAAKH,MAAMuC,eAEXwH,IAEA5J,KAAK2F,SAAS,CAAC2I,UAAW1E,EAAa+E,kBAAkB,EAAMH,qBAAqB,IACpF9L,IAAcC,KAAKC,KAAKgM,mBAAoB,CAACtJ,KAAMsE,IAAc/G,KAC7D,SAACC,GACG2L,QAAQC,IAAI5L,GACZmD,EAAKqH,qBAAgBnM,EAAW,CAACsM,SAAU3K,EAAIG,KAAK/B,OAEpD+E,EAAKN,SAAS,SAACyH,GAAD,MAAgB,CAC1BN,WAAW5M,OAAA6M,EAAA,EAAA7M,CAAA,GAAKkN,EAAUN,WAAehK,EAAIG,2DAa7DyM,cAAc1P,KAAKqP,qBACnBrP,KAAKqP,oBAAsB,sCAGtB,IAAAsC,EAAA3R,KAAA4R,EACkG5R,KAAKmF,MAArG+J,EADF0C,EACE1C,WAAYnB,EADd6D,EACc7D,SAAUiB,EADxB4C,EACwB5C,YAAapF,EADrCgI,EACqChI,YAAawE,EADlDwD,EACkDxD,gBAAiBE,EADnEsD,EACmEtD,UAAWK,EAD9EiD,EAC8EjD,iBAC5EzL,EAAalD,KAAKH,MAAlBqD,UAEP,OACIoD,EAAA/H,EAAAqC,cAAA,OAAK8G,YAAU,qBACXpB,EAAA/H,EAAAqC,cAAC2G,EAAA,EAAD,KACIjB,EAAA/H,EAAAqC,cAAA,2HAEA0F,EAAA/H,EAAAqC,cAACiR,EAAA,EAAD,CAAMC,SAAU9R,KAAKsP,cACjBhJ,EAAA/H,EAAAqC,cAACqB,EAAA,EAAD,KACIqE,EAAA/H,EAAAqC,cAAC4C,EAAA,EAAD,KACI8C,EAAA/H,EAAAqC,cAAA,UACI0F,EAAA/H,EAAAqC,cAACjB,EAAA,EAAD,CAAQf,MAAM,OAAO0G,KAAK,aAAalG,QAASY,KAAKmH,OAC7CP,MAAO,CAACmL,aAAc,SAASzL,EAAA/H,EAAAqC,cAAA,yBADvC,oBAMR0F,EAAA/H,EAAAqC,cAACkG,EAAD,CAAU9C,OAAQkL,GAEd5I,EAAA/H,EAAAqC,cAACsB,EAAA,EAAD,KACIoE,EAAA/H,EAAAqC,cAACsL,GAAD,CAAaE,MAAM,0CACNtC,cAAe9J,KAAKuO,WAAYvG,MAAOsG,EACvC/E,YAAa,eAAgBjE,KAAK,OAAO0G,GAAG,YAC5CM,QAASqC,IAEtBrI,EAAA/H,EAAAqC,cAAC2K,EAAA,EAAD,CAAWC,KAAG,GACVlF,EAAA/H,EAAAqC,cAAC6K,EAAA,EAAD,CAAOC,IAAI,YAAYE,GAAI,GAA3B,UACAtF,EAAA/H,EAAAqC,cAACiL,EAAA,EAAD,CAAKD,GAAI,GACLtF,EAAA/H,EAAAqC,cAACoR,GAAD,CAAqB/I,YAAa/F,EAAW8E,MAAO4B,EAC/BT,SAAUnJ,KAAKsN,oBAG5ChH,EAAA/H,EAAAqC,cAAC2K,EAAA,EAAD,CAAWC,KAAG,GACVlF,EAAA/H,EAAAqC,cAACiL,EAAA,EAAD,CAAKD,GAAI,GACLtF,EAAA/H,EAAAqC,cAAC6K,EAAA,EAAD,CAAOC,IAAI,kBAAX,0BAA2D,IAC3DpF,EAAA/H,EAAAqC,cAAA,KAAGI,KAAK,8CAAR,oBAKZsF,EAAA/H,EAAAqC,cAACqR,EAAA,EAAD,KACI3L,EAAA/H,EAAAqC,cAAA,OAAKpB,UAAU,YACX8G,EAAA/H,EAAAqC,cAACjB,EAAA,EAAD,CAAQf,MAAM,UAAUY,UAAU,cAAcJ,QAASY,KAAK8N,gBAAgBxH,EAAA/H,EAAAqC,cAAA,KAC1EpB,UAAU,4BAM9B8G,EAAA/H,EAAAqC,cAACqB,EAAA,EAAD,KAEIqE,EAAA/H,EAAAqC,cAAA,OAAKQ,IAAK,SAAC8Q,GAAD,OAAQP,EAAK3D,cAAgBkE,KACvC5L,EAAA/H,EAAAqC,cAAC4C,EAAA,EAAD,KACI8C,EAAA/H,EAAAqC,cAAA,UACI0F,EAAA/H,EAAAqC,cAACjB,EAAA,EAAD,CAAQf,MAAM,OAAO0G,KAAK,WAAWlG,QAASY,KAAKmH,OAC3CP,MAAO,CAACmL,aAAc,SAASzL,EAAA/H,EAAAqC,cAAA,yBADvC,kBAKR0F,EAAA/H,EAAAqC,cAACkG,EAAD,CAAU9C,OAAQ+J,GAEdzH,EAAA/H,EAAAqC,cAACsB,EAAA,EAAD,KACIoE,EAAA/H,EAAAqC,cAAC+I,GAAD,CAAiBC,YAAaA,EAAaC,cAAc,EACxCC,cAAe9J,KAAK2M,kBACpB1C,UAAWjK,KAAKmF,MAAMkI,WACtBrD,WAAYhK,KAAKmF,MAAMmH,QACvBvC,cAAe/J,KAAKmF,MAAM2H,WAAY/E,OAAQ7E,KAEnEoD,EAAA/H,EAAAqC,cAACqR,EAAA,EAAD,KACI3L,EAAA/H,EAAAqC,cAAA,OAAKpB,UAAU,YACX8G,EAAA/H,EAAAqC,cAAA,OAAKpB,UAAU,eACX8G,EAAA/H,EAAAqC,cAACkL,EAAA,EAAD,CAAO5K,KAAK,WAAW8G,MAAOoG,EACvBjF,SAAUnJ,KAAKmO,sBAAsB7H,EAAA/H,EAAAqC,cAAA,QAAMpB,UAAU,QAAhB,yBAC5C8G,EAAA/H,EAAAqC,cAACjB,EAAA,EAAD,CAAQf,MAAM,UAAUQ,QAASY,KAAK+O,sBAAsBzI,EAAA/H,EAAAqC,cAAA,KACxDpB,UAAU,6BAQlC8G,EAAA/H,EAAAqC,cAACqB,EAAA,EAAD,KACIqE,EAAA/H,EAAAqC,cAAC4C,EAAA,EAAD,KACI8C,EAAA/H,EAAAqC,cAAA,UACI0F,EAAA/H,EAAAqC,cAACjB,EAAA,EAAD,CAAQf,MAAM,OAAO0G,KAAK,cAAclG,QAASY,KAAKmH,OAC9CP,MAAO,CAACmL,aAAc,SAASzL,EAAA/H,EAAAqC,cAAA,yBADvC,0BAOR0F,EAAA/H,EAAAqC,cAACkG,EAAD,CAAU9C,OAAQgL,GAEd1I,EAAA/H,EAAAqC,cAACsB,EAAA,EAAD,KACIoE,EAAA/H,EAAAqC,cAAC+I,GAAD,CAAiBC,YAAaA,EAAaC,cAAc,EACxCC,cAAe9J,KAAK2M,kBACpB1C,UAAWjK,KAAKmF,MAAMkI,WACtBrD,WAAYhK,KAAKmF,MAAMmH,QACvBvC,cAAe/J,KAAKmF,MAAM2H,WAAY/E,OAAQ7E,OAK3EoD,EAAA/H,EAAAqC,cAAA,OAAKpB,UAAU,WAAW4B,IAAK,SAAC8Q,GAC5BP,EAAK1C,aAAeiD,IAEpB5L,EAAA/H,EAAAqC,cAAA,OAAKpB,UAAU,oBACX8G,EAAA/H,EAAAqC,cAACjB,EAAA,EAAD,CAAQf,MAAM,OAAOsC,KAAK,QAAQ9B,QAAS,kBAAMuS,EAAKtD,cAAtD,SACA/H,EAAA/H,EAAAqC,cAACjB,EAAA,EAAD,CAAQf,MAAM,UAAUsC,KAAK,UAA7B,oBAKZoF,EAAA/H,EAAAqC,cAACuR,EAAD,CAAmB7K,UAAWtH,KAAKmF,MAAMiK,mBAAoB/H,WAAYrH,KAAKuP,2BA9iB3E1H,IAAMxG,WAkkB7BkL,GAASjL,aAAe,CACpB8Q,QAAQ,GAGGC,uBAlBS,SAAAlN,GAAK,MAAK,CAI9BjC,UAAWiC,EAAM4C,OAAO7E,YAcY,CAACd,mBAA1BiQ,CAAyC9F","file":"static/js/13.16160d4f.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  active: PropTypes.bool,\n  'aria-label': PropTypes.string,\n  block: PropTypes.bool,\n  color: PropTypes.string,\n  disabled: PropTypes.bool,\n  outline: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  onClick: PropTypes.func,\n  size: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  close: PropTypes.bool\n};\nvar defaultProps = {\n  color: 'secondary',\n  tag: 'button'\n};\n\nvar Button =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Button, _React$Component);\n\n  function Button(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Button.prototype;\n\n  _proto.onClick = function onClick(e) {\n    if (this.props.disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (this.props.onClick) {\n      this.props.onClick(e);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        active = _this$props.active,\n        ariaLabel = _this$props['aria-label'],\n        block = _this$props.block,\n        className = _this$props.className,\n        close = _this$props.close,\n        cssModule = _this$props.cssModule,\n        color = _this$props.color,\n        outline = _this$props.outline,\n        size = _this$props.size,\n        Tag = _this$props.tag,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"active\", \"aria-label\", \"block\", \"className\", \"close\", \"cssModule\", \"color\", \"outline\", \"size\", \"tag\", \"innerRef\"]);\n\n    if (close && typeof attributes.children === 'undefined') {\n      attributes.children = React.createElement(\"span\", {\n        \"aria-hidden\": true\n      }, \"\\xD7\");\n    }\n\n    var btnOutlineColor = \"btn\" + (outline ? '-outline' : '') + \"-\" + color;\n    var classes = mapToCssModules(classNames(className, {\n      close: close\n    }, close || 'btn', close || btnOutlineColor, size ? \"btn-\" + size : false, block ? 'btn-block' : false, {\n      active: active,\n      disabled: this.props.disabled\n    }), cssModule);\n\n    if (attributes.href && Tag === 'button') {\n      Tag = 'a';\n    }\n\n    var defaultAriaLabel = close ? 'Close' : null;\n    return React.createElement(Tag, _extends({\n      type: Tag === 'button' && attributes.onClick ? 'button' : undefined\n    }, attributes, {\n      className: classes,\n      ref: innerRef,\n      onClick: this.onClick,\n      \"aria-label\": ariaLabel || defaultAriaLabel\n    }));\n  };\n\n  return Button;\n}(React.Component);\n\nButton.propTypes = propTypes;\nButton.defaultProps = defaultProps;\nexport default Button;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  inverse: PropTypes.bool,\n  color: PropTypes.string,\n  body: PropTypes.bool,\n  outline: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar Card = function Card(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      body = props.body,\n      inverse = props.inverse,\n      outline = props.outline,\n      Tag = props.tag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"color\", \"body\", \"inverse\", \"outline\", \"tag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card', inverse ? 'text-white' : false, body ? 'card-body' : false, color ? (outline ? 'border' : 'bg') + \"-\" + color : false), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCard.propTypes = propTypes;\nCard.defaultProps = defaultProps;\nexport default Card;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardBody = function CardBody(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      innerRef = props.innerRef,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"innerRef\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-body'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCardBody.propTypes = propTypes;\nCardBody.defaultProps = defaultProps;\nexport default CardBody;","import axiosInstance from \"../utils/API/API\";\nimport {GET_CONFIG_DUMP, GET_PROVIDERS, REQUEST_ERROR, REQUEST_SUCCESS} from \"./types\";\nimport urls from \"../utils/API/endpoint\";\n\n\n/**\n * Gets all Providers from the rclone UI Backend\n * @returns {Function}\n */\nexport const getProviders = () => dispatch => {\n    axiosInstance.post(urls.getProviders).then(res => dispatch({\n        type: GET_PROVIDERS,\n        payload: res.data.providers\n    }))\n};\n/**\n * Gets dump of configured remotes from the rclone backend\n * @returns {Function}\n */\nexport const getConfigDump = () => dispatch => {\n    axiosInstance.post(urls.getConfigDump).then(res => dispatch({\n        type: GET_CONFIG_DUMP,\n        status: REQUEST_SUCCESS,\n        payload: res.data\n    }), error => dispatch({\n        type: GET_CONFIG_DUMP,\n        status: REQUEST_ERROR,\n        payload: error\n    }))\n};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardHeader = function CardHeader(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-header'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardHeader.propTypes = propTypes;\nCardHeader.defaultProps = defaultProps;\nexport default CardHeader;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  valid: PropTypes.bool,\n  tooltip: PropTypes.bool\n};\nvar defaultProps = {\n  tag: 'div',\n  valid: undefined\n};\n\nvar FormFeedback = function FormFeedback(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      valid = props.valid,\n      tooltip = props.tooltip,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"valid\", \"tooltip\", \"tag\"]);\n\n  var validMode = tooltip ? 'tooltip' : 'feedback';\n  var classes = mapToCssModules(classNames(className, valid ? \"valid-\" + validMode : \"invalid-\" + validMode), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormFeedback.propTypes = propTypes;\nFormFeedback.defaultProps = defaultProps;\nexport default FormFeedback;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\n\nvar _transitionStatusToCl;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Transition } from 'react-transition-group';\nimport { mapToCssModules, omit, pick, TransitionTimeouts, TransitionPropTypeKeys, TransitionStatuses, tagPropType } from './utils';\n\nvar propTypes = _objectSpread({}, Transition.propTypes, {\n  isOpen: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  tag: tagPropType,\n  className: PropTypes.node,\n  navbar: PropTypes.bool,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n});\n\nvar defaultProps = _objectSpread({}, Transition.defaultProps, {\n  isOpen: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  tag: 'div',\n  timeout: TransitionTimeouts.Collapse\n});\n\nvar transitionStatusToClassHash = (_transitionStatusToCl = {}, _transitionStatusToCl[TransitionStatuses.ENTERING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.ENTERED] = 'collapse show', _transitionStatusToCl[TransitionStatuses.EXITING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.EXITED] = 'collapse', _transitionStatusToCl);\n\nfunction getTransitionClass(status) {\n  return transitionStatusToClassHash[status] || 'collapse';\n}\n\nfunction getHeight(node) {\n  return node.scrollHeight;\n}\n\nvar Collapse =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Collapse, _Component);\n\n  function Collapse(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.state = {\n      height: null\n    };\n    ['onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited'].forEach(function (name) {\n      _this[name] = _this[name].bind(_assertThisInitialized(_this));\n    });\n    return _this;\n  }\n\n  var _proto = Collapse.prototype;\n\n  _proto.onEntering = function onEntering(node, isAppearing) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onEntering(node, isAppearing);\n  };\n\n  _proto.onEntered = function onEntered(node, isAppearing) {\n    this.setState({\n      height: null\n    });\n    this.props.onEntered(node, isAppearing);\n  };\n\n  _proto.onExit = function onExit(node) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onExit(node);\n  };\n\n  _proto.onExiting = function onExiting(node) {\n    // getting this variable triggers a reflow\n    var _unused = node.offsetHeight; // eslint-disable-line no-unused-vars\n\n    this.setState({\n      height: 0\n    });\n    this.props.onExiting(node);\n  };\n\n  _proto.onExited = function onExited(node) {\n    this.setState({\n      height: null\n    });\n    this.props.onExited(node);\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        Tag = _this$props.tag,\n        isOpen = _this$props.isOpen,\n        className = _this$props.className,\n        navbar = _this$props.navbar,\n        cssModule = _this$props.cssModule,\n        children = _this$props.children,\n        innerRef = _this$props.innerRef,\n        otherProps = _objectWithoutPropertiesLoose(_this$props, [\"tag\", \"isOpen\", \"className\", \"navbar\", \"cssModule\", \"children\", \"innerRef\"]);\n\n    var height = this.state.height;\n    var transitionProps = pick(otherProps, TransitionPropTypeKeys);\n    var childProps = omit(otherProps, TransitionPropTypeKeys);\n    return React.createElement(Transition, _extends({}, transitionProps, {\n      in: isOpen,\n      onEntering: this.onEntering,\n      onEntered: this.onEntered,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }), function (status) {\n      var collapseClass = getTransitionClass(status);\n      var classes = mapToCssModules(classNames(className, collapseClass, navbar && 'navbar-collapse'), cssModule);\n      var style = height === null ? null : {\n        height: height\n      };\n      return React.createElement(Tag, _extends({}, childProps, {\n        style: _objectSpread({}, childProps.style, style),\n        className: classes,\n        ref: _this2.props.innerRef\n      }), children);\n    });\n  };\n\n  return Collapse;\n}(Component);\n\nCollapse.propTypes = propTypes;\nCollapse.defaultProps = defaultProps;\nexport default Collapse;","import React from \"react\";\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\nimport * as  PropTypes from \"prop-types\";\nimport ErrorBoundary from \"../../../ErrorHandling/ErrorBoundary\";\n\n\nclass NewDriveAuthModal extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n\n    render() {\n        const {isVisible} = this.props;\n        return (\n            <div>\n                <ErrorBoundary>\n                    <Modal isOpen={isVisible} toggle={this.toggle}>\n                        <ModalHeader toggle={this.toggle} data-test=\"modalHeader\">Configuring your drive.</ModalHeader>\n                        <ModalBody data-test=\"modalBody\">\n                            A page will open for you with the authentication for your drive. This modal will\n                            automatically\n                            dismiss upon successful creation\n                        </ModalBody>\n                        <ModalFooter data-test=\"modalFooter\">\n                            <Button color=\"primary\" onClick={this.toggle}>Done</Button>{' '}\n                            {/*<Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>*/}\n                        </ModalFooter>\n                    </Modal>\n                </ErrorBoundary>\n            </div>\n        );\n    }\n}\n\nNewDriveAuthModal.propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired\n};\nNewDriveAuthModal.defaultProps = {\n    isVisible: true,\n};\n\n\nexport default NewDriveAuthModal;","import Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport {findFromConfig} from \"../../../utils/Tools\";\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (config, value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    if (inputLength === 0) {\n        return config;\n\n    }\n\n    return inputLength === 0 ? [] : config.filter(lang =>\n        lang.Description.toLowerCase().slice(0, inputLength) === inputValue\n    );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.Prefix;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion.Description}\n    </div>\n);\n\nclass ProviderAutoSuggest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: []\n        };\n    }\n\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({value}) => {\n        // console.log(value);\n        this.setState({\n            suggestions: getSuggestions(this.props.suggestions, value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n\n    render() {\n        const {value, onChange, suggestions} = this.props;\n        const currentConfig = findFromConfig(suggestions, value);\n        let renderVal = \"\";\n        if (currentConfig === undefined) {\n            renderVal = value;\n        } else {\n            renderVal = currentConfig.Description;\n        }\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Type a provider type',\n            value: renderVal,\n            onChange: onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                alwaysRenderSuggestions={true}\n                highlightFirstSuggestion={true}\n                inputProps={inputProps}\n            />\n        );\n    }\n}\n\nexport default ProviderAutoSuggest;","import React from 'react';\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardFooter,\n    CardHeader,\n    Col,\n    Collapse,\n    Form,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Label\n} from \"reactstrap\";\n// import {config} from \"./config.js\";\nimport NewDriveAuthModal from \"../../Base/NewDriveAuthModal\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {findFromConfig, isEmpty, validateDuration, validateInt, validateSizeSuffix} from \"../../../utils/Tools\";\nimport ProviderAutoSuggest from \"./ProviderAutoSuggest\";\nimport {toast} from \"react-toastify\";\nimport * as PropTypes from 'prop-types';\nimport {getProviders} from \"../../../actions/configActions\";\nimport {connect} from \"react-redux\";\nimport {NEW_DRIVE_CONFIG_REFRESH_TIMEOUT} from \"../../../utils/Constants\";\nimport ErrorBoundary from \"../../../ErrorHandling/ErrorBoundary\";\nimport urls from \"../../../utils/API/endpoint\";\n\n/**\n * Returns a component with set of input, error for the drivePrefix.\n * The input type changes based on config.Options.Type parameter. see code for details.\n * @param drivePrefix   {string}    Name of the remote in the config.\n * @param loadAdvanced  {boolean}   Load or skip the advanced options from the config options.\n * @param changeHandler {function}  This function is called once the value changes\n * @param currentValues {$ObjMap}   This map denotes current updated values for the parameters.\n * @param isValidMap    {$ObjMap}   This map denotes whether the parameter value is valid. This should be set by the changeHandler.\n * @param errorsMap     {$ObjMap}   This map contains string errors of each parameters.\n * @param config        {$ObjMap}   This map contains the actual parameter list and Options for all the providers.\n * @returns             {Array|*}   JSX array with parameter formGroups.\n * @constructor\n */\nfunction DriveParameters({drivePrefix, loadAdvanced, changeHandler, currentValues, isValidMap, errorsMap, config}) {\n    if (drivePrefix !== undefined && drivePrefix !== \"\") {\n        const currentProvider = findFromConfig(config, drivePrefix);\n        let outputMap = [];\n        if (currentProvider !== undefined) {\n            const inputsMap = currentProvider.Options;\n\n            // console.log(\"current values\" + currentValues);\n\n            /* Options format is as follows\n            {\n                        \"Advanced\": true,\n                        \"Default\": -1,\n                        \"DefaultStr\": \"off\",\n                        \"Help\": \"If Object's are greater, use drive v2 API to download.\",\n                        \"Hide\": 0,\n                        \"IsPassword\": false,\n                        \"Name\": \"v2_download_min_size\",\n                        \"NoPrefix\": false,\n                        \"Provider\": \"\",\n                        \"Required\": false,\n                        \"ShortOpt\": \"\",\n                        \"Type\": \"SizeSuffix\",\n                        \"Value\": null,\n                        \"ValueStr\": \"off\"\n                    },\n\n            */\n\n            outputMap = inputsMap.map((attr, idx) => {\n                if (attr.Hide === 0 && ((loadAdvanced && attr.Advanced) || (!loadAdvanced && !attr.Advanced))) {\n                    const labelValue = `${attr.Help}`;\n                    const requiredValue = ((attr.Required) ? (<i className={\"text-red\"}>*</i>) : null);\n\n                    const hasExamples = !isEmpty(attr.Examples);\n                    let examplesMap = null;\n\n                    let inputType = \"\";\n\n\n                    if (attr.IsPassword) {\n                        inputType = \"password\";\n                    } else if (hasExamples) {\n                        inputType = \"string\";\n                        // examplesMap = attr.Examples.map((ex1, id1) => {\n                        //     return (<option key={\"option\" + id1} value={ex1.Value}>{ex1.Help}</option>);\n                        // })\n                    } else if (attr.Type === \"bool\") {\n                        inputType = \"select\";\n                        examplesMap = [\n                            (<option key={1} value={true}>Yes</option>),\n                            (<option key={2} value={false}>No</option>)\n                        ];\n                    } else {\n                        // TODO: Write logic for SizeSuffix, Duration, int\n                        if (attr.Type === \"int\") {\n                            inputType = \"number\";\n                        } else if (attr.Type === \"string\") {\n                            inputType = \"text\";\n                        } else {\n                            inputType = \"text\";\n                        }\n\n                    }\n                    return (\n                        <FormGroup key={idx} row>\n                            <Label for={attr.Name} sm={5}>{labelValue}{requiredValue}</Label>\n                            <Col sm={7}>\n                                <Input type={inputType} value={currentValues[attr.Name]}\n                                       name={attr.Name} valid={isValidMap[attr.Name]} invalid={!isValidMap[attr.Name]}\n                                       id={attr.Name} onChange={changeHandler} required={attr.Required}>\n                                    {examplesMap}\n                                </Input>\n                                <FormFeedback>{errorsMap[attr.Name]}</FormFeedback>\n\n                            </Col>\n                        </FormGroup>\n                    );\n                } else {\n                    return null;\n                }\n            });\n        }\n        return outputMap;\n    }\n    return (\n        <div>Select a drive type to continue</div>\n    );\n}\n\n// function DriveTypes({config}) {\n//     // console.log(config);\n//     let configMap = config.map((drive, idx) => (\n//         <option key={drive.Prefix} value={idx}>{drive.Description}</option>\n//     ));\n//     return configMap;\n// }\n\n\n/**\n * Functional Component. Custom input for selecting a new name for the current config.\n * @param key           {string}    Contains the key to be used as the react key parameter in an array\n * @param id            {string}    Id to be used as a HTML id.\n * @param label         {string}    Label of the form input\n * @param changeHandler {function}  Called when the input changes.\n * @param type          {string}    Type of the input (ReactStrap supported). Eg: select, text etc.\n * @param value         {string}    The current value of the input.\n * @param name          {string}    The html name for the input.\n * @param placeholder   {string}    Placeholder text for input.\n * @param isValid       {boolean}   If set, displays positive message, else displays error message.\n * @returns             {*}         Functional component.\n * @constructor\n */\nfunction CustomInput({key, id, label, changeHandler, type, value, name, placeholder, isValid = false}) {\n    return (\n        <FormGroup key={key} row>\n            <Label for={id} sm={5}>{label}</Label>\n            <Col sm={7}>\n                <Input type={type} value={value} name={name} placeholder={placeholder}\n                       id={id} onChange={changeHandler} valid={isValid} invalid={!isValid} required/>\n                <FormFeedback valid>Sweet! that name is available</FormFeedback>\n                <FormFeedback>Sad! That name is already assigned or empty</FormFeedback>\n            </Col>\n        </FormGroup>);\n}\n\n/**\n * Component to create a new remote configuration.\n */\nclass NewDrive extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n\n            colRconfig: true,\n            colSetup: false,\n            colAdvanced: false,\n            driveName: \"\",\n            driveNameIsEditable: true,\n\n            advancedOptions: false,\n            formValues: {},\n            formValuesValid: {},\n            required: {},\n            authModalIsVisible: false,\n\n            drivePrefix: \"\",\n            driveNameIsValid: false,\n            formErrors: {driveName: \"\"},\n            optionTypes: {},\n            isValid: {},\n\n        };\n        this.configCheckInterval = null;\n        // console.log(\"Params\", this.props.match.params);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.toggleAuthModal = this.toggleAuthModal.bind(this);\n        this.startAuthentication = this.startAuthentication.bind(this);\n        this.checkConfigStatus = this.checkConfigStatus.bind(this);\n    }\n\n    /**\n     *\n     * @param e {$ObjMap} Event of the toggle event.\n     */\n    toggle = (e) => {\n        let name = e.target.name;\n\n        this.setState({[name]: !this.state[name]})\n    };\n\n    // Returns true or false based on whether the config is created\n    async checkConfigStatus() {\n        const {driveName} = this.state;\n\n        try {\n            let res = await axiosInstance.post(urls.getConfigForRemote, {name: driveName});\n            // console.log(res);\n\n            if (!isEmpty(res.data)) {\n                // Config is created, clear the interval and hide modal\n                clearInterval(this.configCheckInterval);\n                this.configCheckInterval = null;\n                this.toggleAuthModal();\n                this.props.history.push('/dashboard');\n\n            }\n        } catch (e) {\n            // console.log(`Error occurred while checking for config: ${e}`);\n            toast.error(`Error creating config. ${e}`, {\n                autoClose: false\n            });\n        }\n    }\n\n    /**\n     * Handle inoit change and set appropriate errors.\n     * @param e\n     */\n    handleInputChange = (e) => {\n\n        let inputName = e.target.name;\n        let inputValue = e.target.value;\n        const inputType = this.state.optionTypes[inputName];\n        this.setState({\n            formValues: {\n                ...this.state.formValues,\n                [inputName]: inputValue\n            }\n        });\n        let validateResult = true;\n        let error = \"\";\n        if (inputType === \"SizeSuffix\") {\n            validateResult = validateSizeSuffix(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is size( off | {unit}{metric} eg: 10G, 100M, 10G100M etc.)\"\n            }\n        } else if (inputType === \"Duration\") {\n            validateResult = validateDuration(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is time ({unit}{metric} eg: 10ms, 100m, 10h15ms etc.)\"\n            }\n        } else if (inputType === \"int\") {\n            validateResult = validateInt(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is int (100,200,300 etc)\"\n            }\n        }\n\n        if (this.state.required[inputName] && (!inputValue || inputValue === \"\")) {\n            validateResult = false;\n            if (!validateResult) {\n                error += \" This field is required\";\n            }\n        }\n\n\n        this.setState((prevState) => {\n            return {\n                isValid: {\n                    ...prevState.isValid,\n                    [inputName]: validateResult\n                },\n                formErrors: {\n                    ...prevState.formErrors,\n                    [inputName]: error\n                },\n            }\n        });\n\n\n    };\n\n    /**\n     * Update the driveType and then load the equivalent input parameters for that drive.\n     * @param event     {$ObjMap} Event to be handled.\n     * @param newValue  {string} new Value of the drive type.\n     */\n    changeDriveType = (event, {newValue}) => {\n\n        const {providers} = this.props;\n\n        let val = newValue;\n\n\n        let availableOptions = {};\n        let optionTypes = {};\n        let isValid = {};\n        let formErrors = {};\n        let required = {};\n        // let drivePrefix = \"\";\n        // console.log(\"driveType change\", val);\n        if (val !== undefined && val !== \"\") {\n\n            const currentConfig = findFromConfig(providers, val);\n            if (currentConfig !== undefined) {\n\n                currentConfig.Options.forEach(item => {\n\n                    const {DefaultStr, Type, Name, Required, Hide} = item;\n                    if (Hide === 0) {\n                        availableOptions[Name] = DefaultStr;\n                        optionTypes[Name] = Type;\n                        required[Name] = Required;\n\n                        isValid[Name] = !(Required && (!DefaultStr || DefaultStr === \"\"));\n\n                        formErrors[Name] = \"\";\n                    }\n                });\n            }\n            this.setState({\n                drivePrefix: val,\n                formValues: availableOptions,\n                optionTypes: optionTypes,\n                isValid: isValid,\n                formErrors: formErrors,\n                required: required\n            });\n        } else {\n            this.setState({drivePrefix: val})\n\n        }\n    };\n\n    /**\n     * Open second step of setting up the drive and scroll into view.\n     */\n    openSetupDrive = (e) => {\n        if (e) e.preventDefault();\n        this.setState({'colSetup': true});\n        this.setupDriveDiv.scrollIntoView({behavior: \"smooth\"});\n    };\n\n    /**\n     *  toggle the step 3: advanced options\n     */\n    editAdvancedOptions = (e) => {\n        this.setState({advancedOptions: !this.state.advancedOptions});\n    };\n\n    /**\n     * Validate the form and set the appropriate errors in the state.\n     * @returns {boolean}\n     */\n    validateForm() {\n        //    Validate driveName and other parameters\n        const {driveNameIsValid, drivePrefix, isValid} = this.state;\n        let flag = true;\n\n        if (!driveNameIsValid) {\n            flag = false;\n        }\n        if (drivePrefix === \"\") {\n            flag = false;\n        }\n\n\n        /*Check for validations based on inputType*/\n        for (const [key, value] of Object.entries(isValid)) {\n            if (!key || !value) {\n                flag = false;\n                break;\n            }\n        }\n\n        return flag;\n    }\n\n    /**\n     *  Show or hide the auth modal.\n     */\n    toggleAuthModal() {\n        this.setState((state, props) => {\n            return {authModalIsVisible: !state.authModalIsVisible}\n        });\n    }\n\n    /**\n     *  Show or hide the authentication modal and start timer for checking if the new config is created.\n     */\n    startAuthentication() {\n        this.toggleAuthModal();\n        // Check every second if the config is created\n        if (this.configCheckInterval === null) {\n            this.configCheckInterval = setInterval(this.checkConfigStatus, NEW_DRIVE_CONFIG_REFRESH_TIMEOUT);\n        } else {\n            console.error(\"Interval already running. Should not start a new one\");\n        }\n\n    }\n\n    /**\n     *  Called when the config is successfully created. Clears the timout and hides the authentication modal.\n     */\n    stopAuthentication() {\n        this.setState((state, props) => {\n            return {authModalIsVisible: false}\n        });\n        clearInterval(this.configCheckInterval);\n\n    }\n\n    /**\n     * Called when form action submit is to be handled.\n     * Validate form and submit request.\n     * */\n    async handleSubmit(e) {\n        e.preventDefault();\n        // console.log(\"Submitted form\");\n\n        const {formValues, drivePrefix} = this.state;\n        const {providers} = this.props;\n\n\n        if (this.validateForm()) {\n\n            if (drivePrefix !== undefined && drivePrefix !== \"\") {\n                const currentProvider = findFromConfig(providers, drivePrefix);\n                if (currentProvider !== undefined) {\n\n\n                    const defaults = currentProvider.Options;\n\n                    // console.log(config, formValues, defaults);\n\n                    let finalParameterValues = {};\n\n\n                    for (const [key, value] of Object.entries(formValues)) {\n\n                        if (key === \"token\") {\n                            finalParameterValues[key] = value;\n                            continue;\n                        }\n                        const defaultValueObj = defaults.find((ele, idx, array) => {\n                            // console.log(key, ele.Name, key === ele.Name);\n                            return (key === ele.Name);\n                        });\n                        if (defaultValueObj) {\n\n                            const {DefaultStr} = defaultValueObj;\n                            if (value !== DefaultStr) {\n                                // console.log(`${value} !== ${DefaultStr}`);\n                                finalParameterValues[key] = value;\n                            }\n                        }\n\n                    }\n\n\n                    let data = {\n                        parameters: finalParameterValues,\n\n                        name: this.state.driveName,\n                        type: this.state.drivePrefix\n                    };\n\n\n                    // console.log(\"Validated form\");\n                    this.startAuthentication();\n                    try {\n                        const {drivePrefix} = this.props.match.params;\n\n                        if (!drivePrefix) {\n\n                            await axiosInstance.post(urls.createConfig, data);\n                            toast.info(\"Config created\");\n                        } else {\n                            await axiosInstance.post(urls.updateConfig, data);\n                            toast.info(\"Config Updated\");\n                        }\n\n                    } catch (err) {\n                        toast.error(`Error creating config. ${err}`, {\n                            autoClose: false\n                        });\n                        this.stopAuthentication();\n                    }\n\n                }\n            }\n        } else {\n            if (!this.state.colSetup) {\n                this.openSetupDrive();\n            }\n\n            if (this.state.advancedOptions && !this.state.colAdvanced) {\n                this.openAdvancedSettings();\n            }\n            toast.warn(`Check for errors before submitting.`, {\n                autoClose: false\n            });\n        }\n    }\n\n    /**\n     * Clears the entire form.\n     * Clearing the driveName and drivePrefix automatically clears the inputs as well.\n     * */\n    clearForm = e => {\n        this.setState({driveName: \"\", drivePrefix: \"\"})\n    };\n\n\n    /**\n     * Change the name of the drive. Check if it already exists, if not, allow to be changes, else set error.\n     * */\n    changeName = e => {\n        const {driveNameIsEditable} = this.state;\n        console.log(\"changeName\");\n        if (driveNameIsEditable) {\n            const value = e.target.value;\n\n            this.setState({driveName: value}, () => {\n\n                if (value === undefined || value === \"\") {\n                    this.setState({driveNameIsValid: false});\n                } else {\n\n                    axiosInstance.post(urls.getConfigForRemote, {name: value}).then((response) => {\n                        let errors = this.state.formErrors;\n                        let isValid = isEmpty(response.data);\n                        if (isValid) {\n                            errors[\"driveName\"] = \"\";\n                        } else {\n                            errors[\"driveName\"] = \"Duplicate\";\n\n                        }\n                        this.setState({formErrors: errors, driveNameIsValid: isValid});\n                    });\n                }\n\n            });\n        } else {\n            this.setState((prevState) => ({formErrors: {...prevState.formErrors, \"driveName\": \"Cannot edit name\"}}))\n        }\n    };\n\n    /**\n     * Open the advanced settings card and scroll into view.\n     * @param e\n     */\n    openAdvancedSettings = e => {\n        if (this.state.advancedOptions) {\n            this.setState({colAdvanced: true});\n        } else {\n            this.configEndDiv.scrollIntoView({behavior: \"smooth\"});\n        }\n    };\n\n\n    /**\n     * Check if the provider list is empty else request new providers list.\n     * */\n\n    componentDidMount() {\n        const {drivePrefix} = this.props.match.params;\n\n\n\n        if (!this.props.providers || this.props.providers.length < 1)\n            this.props.getProviders();\n\n        if (drivePrefix) {\n            //Edit Mode\n            this.setState({driveName: drivePrefix, driveNameIsValid: true, driveNameIsEditable: false});\n            axiosInstance.post(urls.getConfigForRemote, {name: drivePrefix}).then(\n                (res) => {\n                    console.log(res);\n                    this.changeDriveType(undefined, {newValue: res.data.type});\n\n                    this.setState((prevState) => ({\n                        formValues: {...prevState.formValues, ...res.data}\n                    }))\n\n                }\n            )\n        }\n    }\n\n    /**\n     * Clear the intervals.\n     * */\n\n    componentWillUnmount() {\n        clearInterval(this.configCheckInterval);\n        this.configCheckInterval = null;\n    }\n\n    render() {\n        const {colRconfig, colSetup, colAdvanced, drivePrefix, advancedOptions, driveName, driveNameIsValid} = this.state;\n        const {providers} = this.props;\n        // console.log(\"config\", config);\n        return (\n            <div data-test=\"newDriveComponent\">\n                <ErrorBoundary>\n                    <p>This 3 step process will guide you through creating a new config. For auto config, leave the\n                        parameters as is.</p>\n                    <Form onSubmit={this.handleSubmit}>\n                        <Card>\n                            <CardHeader>\n                                <h5>\n                                    <Button color=\"link\" name=\"colRconfig\" onClick={this.toggle}\n                                            style={{marginBottom: '1rem'}}><strong>Step 1:</strong> Remote\n                                        Config</Button>\n                                </h5>\n\n                            </CardHeader>\n                            <Collapse isOpen={colRconfig}>\n\n                                <CardBody>\n                                    <CustomInput label=\"Name of this drive (For your reference)\"\n                                                 changeHandler={this.changeName} value={driveName}\n                                                 placeholder={\"Enter a name\"} name=\"name\" id=\"driveName\"\n                                                 isValid={driveNameIsValid}/>\n\n                                    <FormGroup row>\n                                        <Label for=\"driveType\" sm={5}>Select</Label>\n                                        <Col sm={7}>\n                                            <ProviderAutoSuggest suggestions={providers} value={drivePrefix}\n                                                                 onChange={this.changeDriveType}/>\n                                        </Col>\n                                    </FormGroup>\n                                    <FormGroup row>\n                                        <Col sm={3}>\n                                            <Label for=\"inputDriveName\">Docs are available at </Label>{' '}\n                                            <a href=\"https://rclone.org/commands/rclone_config/\">Rclone Config</a>\n                                        </Col>\n                                    </FormGroup>\n                                </CardBody>\n\n                                <CardFooter>\n                                    <div className=\"clearfix\">\n                                        <Button color=\"success\" className=\"float-right\" onClick={this.openSetupDrive}><i\n                                            className=\"fa fa-check fa-lg \"/></Button>\n                                    </div>\n                                </CardFooter>\n\n                            </Collapse>\n                        </Card>\n                        <Card>\n                            {/*div for Scrolling to here*/}\n                            <div ref={(el) => this.setupDriveDiv = el}/>\n                            <CardHeader>\n                                <h5>\n                                    <Button color=\"link\" name=\"colSetup\" onClick={this.toggle}\n                                            style={{marginBottom: '1rem'}}><strong>Step 2:</strong> Setup Drive</Button>\n                                </h5>\n\n                            </CardHeader>\n                            <Collapse isOpen={colSetup}>\n\n                                <CardBody>\n                                    <DriveParameters drivePrefix={drivePrefix} loadAdvanced={false}\n                                                     changeHandler={this.handleInputChange}\n                                                     errorsMap={this.state.formErrors}\n                                                     isValidMap={this.state.isValid}\n                                                     currentValues={this.state.formValues} config={providers}/>\n                                </CardBody>\n                                <CardFooter>\n                                    <div className=\"clearfix\">\n                                        <div className=\"float-right\">\n                                            <Input type=\"checkbox\" value={advancedOptions}\n                                                   onChange={this.editAdvancedOptions}/><span className=\"mr-3\">Edit Advanced Options</span>\n                                            <Button color=\"success\" onClick={this.openAdvancedSettings}><i\n                                                className=\"fa fa-check fa-lg \"/></Button>\n\n                                        </div>\n                                    </div>\n                                </CardFooter>\n\n                            </Collapse>\n                        </Card>\n                        <Card>\n                            <CardHeader>\n                                <h5>\n                                    <Button color=\"link\" name=\"colAdvanced\" onClick={this.toggle}\n                                            style={{marginBottom: '1rem'}}><strong>Step 3:</strong> Advanced\n                                        (optional)</Button>\n\n                                </h5>\n\n                            </CardHeader>\n                            <Collapse isOpen={colAdvanced}>\n\n                                <CardBody>\n                                    <DriveParameters drivePrefix={drivePrefix} loadAdvanced={true}\n                                                     changeHandler={this.handleInputChange}\n                                                     errorsMap={this.state.formErrors}\n                                                     isValidMap={this.state.isValid}\n                                                     currentValues={this.state.formValues} config={providers}/>\n                                </CardBody>\n\n                            </Collapse>\n                        </Card>\n                        <div className=\"clearfix\" ref={(el) => {\n                            this.configEndDiv = el\n                        }}>\n                            <div className=\"float-right mb-3\">\n                                <Button color=\"info\" type=\"reset\" onClick={() => this.clearForm()}>Clear</Button>\n                                <Button color=\"success\" type=\"submit\">Create Config</Button>\n\n                            </div>\n                        </div>\n                    </Form>\n                    <NewDriveAuthModal isVisible={this.state.authModalIsVisible} closeModal={this.toggleAuthModal}/>\n                </ErrorBoundary>\n            </div>);\n    }\n}\n\nconst mapStateToProps = state => ({\n    /**\n     * The list of all providers.\n     */\n    providers: state.config.providers\n});\n\nNewDrive.propTypes = {\n    providers: PropTypes.array.isRequired,\n    getProviders: PropTypes.func.isRequired,\n    isEdit: PropTypes.bool.isRequired,\n    driveName: PropTypes.string\n};\n\nNewDrive.defaultProps = {\n    isEdit: false,\n};\n\nexport default connect(mapStateToProps, {getProviders})(NewDrive);\n"],"sourceRoot":""}