{"version":3,"sources":["utils/RclonePropTypes.js","views/Explorer/RemotesList/RemoteListAutoSuggest.js","actions/explorerStateActions.js","actions/explorerActions.js","views/Explorer/RemotesList/RemotesList.js","views/Explorer/FilesView/Constants.js","views/Base/Widgets/VideoPlayer/VideoPlayer.js","views/Base/Widgets/ImageLoader/ImageLoader.js","actions/imagesActions.js","views/Base/Widgets/AudioPlayer/AudioPlayer.js","views/Base/MediaWidget/MediaWidget.js","views/Explorer/FilesView/FileComponent.js","views/Base/LinkShareModal/LinkShareModal.js","views/Base/ScrollableDiv/ScrollableDiv.js","views/Explorer/FilesView/FilesView.js","views/Base/NewFolder/NewFolder.js","views/Base/FileOperations/FileOperations.js","actions/providerStatusActions.js","views/Explorer/RemoteExplorer/RemoteExplorer.js","views/Explorer/RemoteExplorerLayout/RemoteExplorerLayout.js"],"names":["prop_types__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","PropTypes","Features","isRequired","Hashes","Name","Precision","String","remoteName","remotePath","Path","Size","MimeType","ModTime","IsDir","rate","getSuggestions","config","value","inputValue","trim","toLowerCase","inputLength","length","filter","lang","slice","getSuggestionValue","suggestion","renderSuggestion","react_default","a","createElement","RemoteListAutoSuggest","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSuggestionsFetchRequested","_ref","setState","suggestions","onSuggestionsClearRequested","state","_this$props","inputProps","placeholder","onChange","dist_default","highlightFirstSuggestion","React","Component","changePath","containerID","dispatch","type","CHANGE_PATH","id","getFilesForContainerID","changeRemoteName","CHANGE_REMOTE_NAME","getState","_state$explorer$curre","explorer","currentPaths","getFiles","createPath","CREATE_PATH","navigateUp","NAVIGATE_UP","navigateFwd","NAVIGATE_FWD","navigateBack","NAVIGATE_BACK","data","fs","indexOf","addColonAtLast","remote","path","concat","axiosInstance","post","urls","getFilesList","then","res","GET_FILES_LIST","status","REQUEST_SUCCESS","payload","filesList","list","error","REQUEST_ERROR","RemotesList","shouldUpdateRemoteName","event","newValue","openButtonText","openRemote","e","preventDefault","getFsInfo","isEmpty","openEnabled","getRemoteNames","_this$state","remotes","hasError","role","aria-label","Form","onSubmit","Row","Col","xs","sm","lg","RemotesList_RemoteListAutoSuggest","Button","className","color","defaultProps","connect","ownProps","currentPath","listRemotes","GET_REMOTE_LIST","sentRemoteName","setRemoteName","isLocalRemoteName","split","GET_CONFIG_FOR_REMOTE","defineProperty","ItemTypes","PlayerComponent","console","log","options","lib_default","VideoPlayer","element","playbackURL","_useState","useState","_useState2","slicedToArray","preview","setPreview","hideFull","stopPropagation","data-test","onClick","subtitleURL","substring","lastIndexOf","sources","src","subtitles","language","url","label","ReactDOM","Modal","isOpen","toggle","VideoPlayer_PlayerComponent","document","getElementById","MODAL_ROOT_ELEMENT","ErrorBoundary","downloadURL","imageData","imageLoader","downloadImage","Error","LOAD_IMAGE","REQUEST_LOADING","get","responseType","imgFile","Blob","imgUrl","URL","createObjectURL","err","inViewport","_useState3","_useState4","rotateAngle","setRotateAngle","useEffect","isLoading","Spinner","alt","externalCloseBtn","style","position","top","right","external","Container","fluid","Card","CardHeader","CardBody","AudioPlayer","controls","isMedia","image/jpeg","video/mp4","video/webm","audio/webm","video/ogg","application/ogg","audio/mpeg","audio/wav","audio/mp4","MediaWidget","getRenderForItem","fsInfo","item","ipAddress","localStorage","getItem","IP_ADDRESS_KEY","BucketBased","ImageLoader_ImageLoader","VideoPlayer_VideoPlayer","AudioPlayer_AudioPlayer","_this$props2","loadMedia","loadImages","configs","tempRemoteName","_callee","params","srcRemoteName","srcRemotePath","destRemoteName","destRemotePath","dropEffect","updateHandler","regenerator_default","wrap","_context","prev","next","performCopyFile","toast","info","performMoveFile","stop","fileComponentSource","canDrag","beginDrag","_props$item","endDrag","monitor","component","getDropResult","performCopyMoveOperation","response","JSON","stringify","autoClose","FileIcon","confirmDelete","deleteHandle","window","confirm","Actions","_ref2","downloadHandle","linkShareHandle","Fragment","UncontrolledButtonDropdown","DropdownToggle","DropdownMenu","DropdownItem","header","divider","FileComponent","clickHandler","connectDragSource","gridMode","itemIdx","modTime","Date","parse","handleClick","Base_MediaWidget_MediaWidget","CardFooter","formatBytes","toLocaleDateString","MyViewPort","handleViewport","rootMargin","DragSource","dragSource","connectDragPreview","dragPreview","isDragging","LinkShareModal","copyToClipboard","textField","innerText","linkUrl","body","appendChild","select","execCommand","remove","handleFocus","target","copySuccess","bind","assertThisInitialized","closeModal","isVisible","isCopyAllowed","queryCommandSupported","ModalHeader","ModalBody","Input","readOnly","onFocus","ModalFooter","ScrollableDiv","height","children","overflow","filesTarget","drop","didDrop","_monitor$getItem","canDrop","_monitor$getItem2","UpButtonComponent","upButtonHandle","colSpan","FilesView","closeLinkShareModal","showLinkShareModal","_this$props$currentPa","dismissAlert","isDownloadProgress","PublicLink","createPublicLink","generatedLink","getFileComponents","isDir","files","_this$props$currentPa2","map","idx","ID","undefined","key","FilesView_FileComponent","handleFileClick","isBucketBased","canCopy","Copy","canMove","Move","downloadingItems","shouldUpdate","IsBucket","updateRemotePath","newRemotePath","updateRemoteName","arguments","_this$props$currentPa3","downloadUrl","prevState","method","link","href","setAttribute","click","_this2","purge","deleteFile","_context2","t0","connectDropTarget","isOver","dirComponentMap","fileComponentMap","renderElement","ScrollableDiv_ScrollableDiv","FILES_VIEW_HEIGHT","Table","left","width","zIndex","opacity","backgroundColor","Alert","Base_LinkShareModal_LinkShareModal","PureComponent","compose","visibilityFilter","visibilityFilters","searchQuery","searchQueries","pathKey","changeListVisibility","changeSearchFilter","DropTarget","dropTarget","NewFolder","disableForm","shouldDisable","changeName","name","createNewFolder","handleSubmit","mkdir","FormGroup","row","Label","for","required","autoFocus","disabled","FileOperations","openNewFolderModal","CanHaveEmptyDirectories","newFolderModalIsVisible","closeNewFolderModal","handleChangeFilter","newFilter","changeVisibilityFilter","toggleDropDown","handleChangeGridMode","changeGridMode","changeSearch","setSearchQuery","dropdownOpen","toggleAboutModal","About","isAboutModalOpen","getAbout","handleCleanTrash","CleanUp","cleanUpRemote","changeLoadMedia","setLoadImages","filterOptions","visibilityFilteringOptions","_this$props3","doughnutData","ButtonGroup","UncontrolledTooltip","placement","InputGroup","InputGroupAddon","addonType","ButtonDropdown","caret","Base_NewFolder_NewFolder","react_chartjs_2_es","remoteAbout","providerStatus","about","labels","_i","_Object$entries","entries","_ref3","push","bytesToGB","toFixed","datasets","hoverBackgroundColor","CHANGE_VISIBILITY_FILTER","mode","CHANGE_GRID_MODE","CHANGE_SEARCH_QUERY","GET_REMOTE_ABOUT","shouldLoad","CHANGE_LOAD_IMAGES","RemoteExplorer","remoteNameTemp","distractionFreeMode","isValidPath","Explorer_RemotesList_RemotesList","Base_FileOperations_FileOperations","Explorer_FilesView_FilesView","changeRemotePath","CHANGE_REMOTE_PATH","RemoteExplorerList","cols","remoteExplorers","lgSize","i","md","Explorer_RemoteExplorer_RemoteExplorer","toString","RemoteExplorerLayout","changeLayout","nos","changeNumCols","toggleDistractionFreeMode","changeDistractionFreeMode","numCols","backStacks","CHANGE_LAYOUT_COLS","shouldEnable","CHANGE_DISTRACTION_FREE_MODE","DragDropContext","HTML5Backend"],"mappings":"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","file":"static/js/19.2f2e218e.chunk.js","sourcesContent":["import * as PropTypes from \"prop-types\";\n\nexport const PROP_FS_INFO = PropTypes.oneOfType([\n    PropTypes.shape({\n        Features: PropTypes.object.isRequired,\n        Hashes: PropTypes.array.isRequired,\n        Name: PropTypes.string.isRequired,\n        Precision: PropTypes.number.isRequired,\n        String: PropTypes.string.isRequired\n    }),\n    PropTypes.object\n]);\n\nexport const PROP_CURRENT_PATH = PropTypes.shape({\n    remoteName: PropTypes.string.isRequired,\n    remotePath: PropTypes.string.isRequired\n});\n\nexport const PROP_CONTAINER_ID = PropTypes.string;\n\nexport const PROP_LOAD_IMAGES_BOOL = PropTypes.bool;\n\nexport const PROP_IN_VIEWPORT = PropTypes.bool;\n\nexport const PROP_ITEM = PropTypes.shape({\n\n    Path: PropTypes.string.isRequired,\n    Name: PropTypes.string.isRequired,\n    Size: PropTypes.number,\n    MimeType: PropTypes.string,\n    ModTime: PropTypes.string.isRequired,\n    IsDir: PropTypes.bool.isRequired\n\n});\n\nexport const PROP_BANDWIDTH = PropTypes.shape({\n    // bytesPerSecond: PropTypes.number.isRequired,\n    rate: PropTypes.string.isRequired\n\n});","import Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (config, value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    if (inputLength === 0) {\n        return config;\n\n    }\n\n    return inputLength === 0 ? [] : config.filter(lang =>\n        lang.toLowerCase().slice(0, inputLength) === inputValue\n    );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion}\n    </div>\n);\n\nclass RemoteListAutoSuggest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: []\n        };\n    }\n\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({value}) => {\n        // console.log(value);\n        this.setState({\n            suggestions: getSuggestions(this.props.suggestions, value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    render() {\n        const {value, onChange} = this.props;\n\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Type the name of remote you want to open',\n            value: value,\n            onChange: onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                highlightFirstSuggestion={true}\n                inputProps={inputProps}\n            />\n        );\n    }\n}\n\nRemoteListAutoSuggest.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    suggestions: PropTypes.array.isRequired\n};\n\nexport default RemoteListAutoSuggest;","import {\n    CHANGE_GRID_MODE,\n    CHANGE_LOAD_IMAGES,\n    CHANGE_PATH,\n    CHANGE_REMOTE_NAME,\n    CHANGE_REMOTE_PATH,\n    CHANGE_SEARCH_QUERY,\n    CHANGE_VISIBILITY_FILTER,\n    CREATE_PATH,\n    NAVIGATE_BACK,\n    NAVIGATE_FWD,\n    NAVIGATE_UP\n} from \"./types\";\nimport {getFiles} from \"./explorerActions\";\n\n/**\n * Changes the current path of a container using container ID\n * @param containerID {string}\n * @param remoteName {string} Name of the remote config/ (\"/\" for local path). May contain abc:bucketName for bucket based remotes\n * @param remotePath {string} Name of the path in the remote. eg: /tmp\n * @returns {Function}\n */\nexport const changePath = (containerID, remoteName, remotePath) => {\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_PATH,\n            remoteName: remoteName,\n            id: containerID,\n            remotePath: remotePath\n        });\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\n/**\n * Changes the current remote name for a particular container id\n * @param containerID {string}\n * @param remoteName {string}\n * @returns {Function}\n */\nexport const changeRemoteName = (containerID, remoteName) => {\n\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_REMOTE_NAME,\n            remoteName: remoteName,\n            id: containerID,\n            remotePath: \"\"\n        });\n\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\n/**\n * Issues a request to fetch the files in the current path of a container using container id.\n * @param containerID\n * @returns {Function}\n */\nexport const getFilesForContainerID = (containerID) => {\n\n    return (dispatch, getState) => {\n        const state = getState();\n        const {remoteName, remotePath} = state.explorer.currentPaths[containerID];\n        if (remoteName && remoteName !== \"\")\n            dispatch(getFiles(remoteName, remotePath));\n    }\n};\n\n/**\n * Changes the current remote path for a container ID without changing the remote name.\n * @param containerID {string}\n * @param remotePath {string}\n * @returns {Function}\n */\nexport const changeRemotePath = (containerID, remotePath) => {\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_REMOTE_PATH,\n            id: containerID,\n            remotePath: remotePath\n        });\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\n/**\n * Creates an empty path for initialization of a container.\n * @param containerID {string}\n * @returns {Function}\n */\nexport const createPath = (containerID) => dispatch => {\n\n    dispatch({\n        type: CREATE_PATH,\n        id: containerID\n    })\n};\n\n\n/**\n * Computes and requests the path for going one level up in the working directory.\n * Eg: /tmp/abc -> navigateUp -> /tmp\n * @param containerID\n * @returns {Function}\n */\nexport const navigateUp = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_UP,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\n/**\n * Navigates one stack entry up.\n * Requires at least one backStack entry. (The navigateBack should have been called at least once).\n * @param containerID {string}\n * @returns {Function}\n */\nexport const navigateFwd = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_FWD,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\n\n/**\n * Navigates to one stack entry back. Works when used with navigateFwd, navigateUp.\n * Also requests for files in the new path\n * @param containerID\n * @returns {Function}\n */\nexport const navigateBack = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_BACK,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\n/**\n * Changes the visibility filter for a given container, the filter may contain values like Images, Videos to enable viewing of only those type of file inside a container.\n * @param containerID\n * @param filter {string}\n * @returns {Function}\n */\nexport const changeVisibilityFilter = (containerID, filter) => dispatch => {\n    dispatch({\n        type: CHANGE_VISIBILITY_FILTER,\n        id: containerID,\n        filter\n    })\n};\n\n/**\n * Changes the view from Grid Mode to Card Mode or Card Mode to Grid Mode\n * @param containerID\n * @param mode {string}\n * @returns {Function}\n */\nexport const changeGridMode = (containerID, mode) => dispatch => {\n    dispatch({\n        type: CHANGE_GRID_MODE,\n        id: containerID,\n        mode\n    })\n};\n\n/**\n * Changes the current search query to be searched in the container id. Filters the files and folders according to the new search query.\n * @param containerID\n * @param searchQuery\n * @returns {Function}\n */\nexport const setSearchQuery = (containerID, searchQuery) => dispatch => {\n    dispatch({\n        type: CHANGE_SEARCH_QUERY,\n        id: containerID,\n        searchQuery\n    })\n};\n\nexport const setLoadImages = (containerID, shouldLoad) => dispatch => {\n    dispatch({\n        type: CHANGE_LOAD_IMAGES,\n        id: containerID,\n        payload: shouldLoad\n    })\n};\n\n","import axiosInstance from \"../utils/API/API\";\nimport {\n    CHANGE_DISTRACTION_FREE_MODE,\n    CHANGE_LAYOUT_COLS,\n    GET_CONFIG_FOR_REMOTE,\n    GET_FILES_LIST,\n    GET_REMOTE_LIST,\n    REQUEST_ERROR,\n    REQUEST_SUCCESS\n} from \"./types\";\nimport {addColonAtLast, isLocalRemoteName} from \"../utils/Tools\";\nimport {createPath} from \"./explorerStateActions\";\nimport urls from \"../utils/API/endpoint\";\n\n/**\n * Gets the information regarding features, hashes from the rclone backend. Stores into redux store.\n * @param remoteName {string} The name of the remote\n * @returns {Function}\n */\nexport const getFsInfo = (remoteName) => dispatch => {\n\n    let sentRemoteName;\n    let setRemoteName;\n\n    if (isLocalRemoteName(remoteName)) {\n        sentRemoteName = setRemoteName = \"/\";\n\n    } else {\n        setRemoteName = remoteName.split(':')[0];\n        sentRemoteName = addColonAtLast(setRemoteName);\n    }\n    // console.log(\"Actual: \", sentRemoteName);\n    axiosInstance.post(urls.getFsInfo, {fs: sentRemoteName})\n        .then((res) => {\n                dispatch({\n                    type: GET_CONFIG_FOR_REMOTE,\n                    status: REQUEST_SUCCESS,\n                    payload: {[setRemoteName]: res.data},\n\n                })\n            },\n            error => dispatch({\n                type: GET_CONFIG_FOR_REMOTE,\n                status: REQUEST_ERROR,\n                payload: error\n            }))\n\n};\n\n/**\n * Get only remote names from the rclone backend. Stores into redux store.\n * @returns {Function}\n */\n\nexport const getRemoteNames = () => {\n    return (dispatch, getState) => {\n        const state = getState();\n        // console.log(state);\n        if (!state.remote.remotes || state.remote.remotes.length < 1) {\n\n            axiosInstance.post(urls.listRemotes).then(res => dispatch({\n                type: GET_REMOTE_LIST,\n                status: REQUEST_SUCCESS,\n                payload: res.data.remotes\n            }), error => dispatch({\n                type: GET_REMOTE_LIST,\n                status: REQUEST_ERROR,\n                payload: error\n            }))\n        }\n    }\n};\n\n/**\n * Gets the files for a specified remote path (remoteName + remotePath). Stores into redux store.\n * @param remoteName {string} Name of the remote config/ (\"/\" for local path). May contain abc:bucketName for bucket based remotes\n * @param remotePath {string} Name of the path in the remote\n * @returns {Function}\n */\nexport const getFiles = (remoteName, remotePath) => dispatch => {\n    let newRemoteName = \"\";\n    if (remoteName !== \"\") {\n        if (remoteName.indexOf('/') !== 0) {/*The name starts with a /: local Name*/\n            newRemoteName = addColonAtLast(remoteName);\n        } else {\n            newRemoteName = remoteName;\n        }\n\n\n        let data = {\n            fs: newRemoteName,\n            remote: remotePath\n        };\n\n        const path = `${remoteName}-${remotePath}`;\n        axiosInstance.post(urls.getFilesList, data).then(res => dispatch({\n                type: GET_FILES_LIST,\n                status: REQUEST_SUCCESS,\n                payload: {path: path, filesList: res.data.list}\n            }),\n            error => dispatch({\n                type: GET_FILES_LIST,\n                status: REQUEST_ERROR,\n                payload: {path: path, error}\n            })\n        )\n    }\n\n};\n\n/**\n * Changes the number of columns in current layout view.\n * @param numCols       {number} Number of columns to create\n * @returns {Function}\n */\nexport const changeNumCols = (numCols) => (dispatch) => {\n    if (!numCols || numCols < 0) throw new Error(`Invalid number of cols:${numCols}`);\n\n\n    for (let i = 0; i < numCols; i++) {\n        dispatch(createPath(i.toString()))\n    }\n\n    dispatch({\n        type: CHANGE_LAYOUT_COLS,\n        payload: {\n            numCols\n        }\n    })\n};\n\n/**\n * Enter or exit distraction free mode\n * @param shouldEnable  {boolean} Enable or disable distraction free mode.\n * @returns {Function}\n */\nexport const changeDistractionFreeMode = (shouldEnable) => dispatch => {\n    dispatch({\n        type: CHANGE_DISTRACTION_FREE_MODE,\n        payload: shouldEnable\n    })\n};\n","import React from 'react';\nimport RemoteListAutoSuggest from \"./RemoteListAutoSuggest\";\nimport {connect} from \"react-redux\";\nimport {getFsInfo, getRemoteNames} from \"../../../actions/explorerActions\";\nimport PropTypes from 'prop-types'\nimport {changeRemoteName} from \"../../../actions/explorerStateActions\";\nimport {Button, Col, Form, Row} from \"reactstrap\";\nimport {PROP_CURRENT_PATH} from \"../../../utils/RclonePropTypes\";\n\nclass RemotesList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEmpty: false,\n            remoteName: props.remoteName,\n            openEnabled: false,\n            openButtonText: \"Open\"\n        };\n    }\n\n    componentDidMount() {\n\n        this.props.getRemoteNames();\n    }\n\n    shouldUpdateRemoteName = (event, {newValue}) => {\n        if (newValue.indexOf('/') === 0) {\n            this.setState({\n                remoteName: newValue,\n                openButtonText: \"Open local path\",\n\n            });\n        } else {\n            this.setState({\n                remoteName: newValue,\n                openButtonText: \"Open\"\n            });\n        }\n\n\n    };\n\n    openRemote = (e) => {\n        e.preventDefault();\n        const {changeRemoteName, containerID} = this.props;\n        const {remoteName} = this.state;\n        changeRemoteName(containerID, remoteName);\n\n        this.props.getFsInfo(remoteName);\n\n    };\n\n\n    render() {\n        const {isEmpty, remoteName} = this.state;\n        const {remotes} = this.props;\n        const {hasError} = this.props;\n        // const {updateRemoteNameHandle} = this.props;\n\n        if (hasError) {\n            return (\n                <div>\n                    Error loading remotes. Please try again.\n                </div>\n            )\n        } else if (isEmpty) {\n            return (\n                <div>\n                    Add some remotes to see them here <span role=\"img\" aria-label=\"sheep\">🐑</span>.\n                </div>);\n        } else {\n\n            return (\n                <Form onSubmit={this.openRemote}>\n                    <Row>\n\n                        <Col xs={12} sm={10} lg={8}>\n                            <RemoteListAutoSuggest value={remoteName} onChange={this.shouldUpdateRemoteName}\n                                                   suggestions={remotes}/>\n                        </Col>\n                        <Col xs={12} sm={2} lg={4}>\n\n                            <Button className={\"btn-lg\"} color=\"success\">{this.state.openButtonText}</Button>\n                        </Col>\n\n                    </Row>\n                </Form>\n\n            );\n        }\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n    remotes: state.remote.remotes,\n    hasError: false,\n    error: state.remote.error,\n    currentPath: state.explorer.currentPaths[ownProps.containerID],\n});\n\nconst propTypes = {\n    remotes: PropTypes.array.isRequired,\n    error: PropTypes.object,\n    hasError: PropTypes.bool,\n    containerID: PropTypes.string.isRequired,\n\n    currentPath: PROP_CURRENT_PATH\n\n};\n\n\nconst defaultProps = {};\n\nRemotesList.propTypes = propTypes;\nRemotesList.defaultProps = defaultProps;\n\n\nexport default connect(mapStateToProps, {\n    getRemoteNames,\n    getFsInfo,\n    changeRemoteName,\n\n})(RemotesList);\n","/*This is used by React DND for identifying the drag source type*/\nexport const ItemTypes = {\n    FILECOMPONENT: 'FileComponent'\n}","import React, {useState} from \"react\";\nimport {Button, Modal} from \"reactstrap\";\nimport * as ReactDOM from \"react-dom\";\nimport {MODAL_ROOT_ELEMENT} from \"../../../../utils/Constants\";\nimport * as PropTypes from \"prop-types\";\nimport ErrorBoundary from \"../../../../ErrorHandling/ErrorBoundary\";\n\nimport ReactAwesomePlayer from 'react-awesome-player'\n\nclass PlayerComponent extends React.Component {\n    // loadeddata() {\n    //     console.log('loadeddata')\n    // }\n    // canplay() {\n    //     console.log('canplay')\n    // }\n    // canplaythrough() {\n    //     console.log('canplaythrough')\n    // }\n    // play() {\n    //     console.log('play')\n    // }\n    // pause() {\n    //     console.log('pause')\n    // }\n    // waiting() {\n    //     console.log('waiting')\n    // }\n    // playing() {\n    //     console.log('playing')\n    // }\n    // ended() {\n    //     console.log('ended')\n    // }\n    error() {\n        console.log('error')\n    }\n\n    render() {\n        const {options} = this.props;\n        return <ReactAwesomePlayer\n            options={options}\n\n            error={this.error}\n        />\n    }\n}\n\nfunction VideoPlayer({playbackURL, MimeType}) {\n\n    const [preview, setPreview] = useState(true);\n\n    function hideFull(e) {\n        e.stopPropagation();\n        setPreview(!preview);\n\n    }\n\n    let element;\n    if (preview) {\n        element = (\n            <div className=\"img-thumbnail w-100 text-center\" data-test=\"videoPlayerWidget\">\n                <Button color=\"link\" onClick={hideFull}>\n                    <i className=\"fa fa-play-circle fa-4x\"/>\n                    {/*<ReactPlayer url={playbackURL} light={true} controls={true}/>*/}\n                </Button>\n            </div>\n        )\n    } else {\n\n        // Load the video\n\n        const subtitleURL = playbackURL.substring(0, playbackURL.lastIndexOf('.')) + \".vtt\";\n        console.log(subtitleURL);\n\n        const options = {\n            options: {\n                sources: [{\n                    type: MimeType,\n                    src: playbackURL\n                }],\n                subtitles: [\n                    {\n                        language: 'en',\n                        url: subtitleURL,\n                        label: \"EN\"\n                    }],\n            }\n        };\n\n\n        element = ReactDOM.createPortal((\n            <Modal className=\"task-modal d-none d-sm-block\" data-test=\"videoPlayerWidget\" isOpen={!preview}\n                   toggle={hideFull}>\n\n                {/*<video id=\"video\" controls preload=\"metadata\" width=\"600\">*/}\n                {/*    <source src={playbackURL} type={MimeType}/>*/}\n                {/*</video>*/}\n                <PlayerComponent {...options}/>\n\n\n            </Modal>\n        ), document.getElementById(MODAL_ROOT_ELEMENT));\n    }\n\n    return (\n        <ErrorBoundary>\n            {element}\n        </ErrorBoundary>\n    )\n\n\n}\n\nVideoPlayer.propTypes = {\n    playbackURL: PropTypes.string.isRequired,\n    MimeType: PropTypes.string.isRequired\n};\n\nexport default VideoPlayer;","import React, {useEffect, useState} from 'react';\nimport {Button, Card, CardBody, CardHeader, Col, Container, Modal, Row, Spinner} from \"reactstrap\";\nimport * as ReactDOM from \"react-dom\";\nimport {MODAL_ROOT_ELEMENT} from \"../../../../utils/Constants\";\nimport {connect} from \"react-redux\";\nimport {downloadImage} from \"../../../../actions/imagesActions\";\n\nfunction ImageLoader({downloadURL, inViewport, imageData, downloadImage, currentPath}) {\n\n    const [preview, setPreview] = useState(true);\n    const [rotateAngle, setRotateAngle] = useState(0);\n\n\n    useEffect(() => {\n        if (inViewport && downloadURL && !imageData) {\n            downloadImage(downloadURL);\n        }\n    });\n\n\n    function hideFull(e) {\n        e.stopPropagation();\n        setPreview(!preview);\n    }\n\n    function rotateLeft() {\n        if (rotateAngle > 0)\n            setRotateAngle((rotateAngle - 90) % 360);\n        else\n            setRotateAngle((360 - rotateAngle - 90) % 360);\n    }\n\n    function rotateRight() {\n        setRotateAngle((rotateAngle + 90) % 360);\n    }\n\n    if (preview) {\n        return (\n            <div onClick={hideFull} data-test=\"toggleModal\">\n\n                {\n                    !imageData || imageData.isLoading ? <Spinner>Loading...</Spinner> :\n                        <img className=\"img-thumbnail pd-0 m-0 -rotate-90\" src={imageData.data} alt=\"\"/>\n                }\n            </div>\n        );\n    } else {\n\n        // Load the Image\n\n        const externalCloseBtn = <button className=\"close\" style={{position: 'absolute', top: '15px', right: '15px'}}\n                                         onClick={hideFull}><i className=\"fa fa-close fa-inverse\"/></button>;\n\n\n        return ReactDOM.createPortal((\n            <Modal className=\"image-modal\" isOpen={!preview} toggle={hideFull} external={externalCloseBtn}>\n\n                <Container fluid={true}>\n                    <Row>\n                        <Col lg={8}>\n                            <img\n                                className={\"rotatableImage img-thumbnail pd-0 m-0 \" + (rotateAngle !== 0 ? \"rotate\" + rotateAngle : \"\")}\n                                src={imageData.data} alt=\"\"/>\n                        </Col>\n                        <Col lg={4}>\n                            <Card>\n                                <CardHeader>\n                                    Operations\n                                </CardHeader>\n                                <CardBody>\n                                    <Row>\n                                        <Button color=\"link\" onClick={rotateLeft}>\n                                            <i className=\"fa fa-rotate-left\"/>\n                                        </Button>\n\n                                        <Button color=\"link\" onClick={rotateRight}>\n                                            <i className=\"fa fa-rotate-right\"/>\n                                        </Button>\n                                    </Row>\n\n                                </CardBody>\n                            </Card>\n                        </Col>\n\n                    </Row>\n                </Container>\n\n\n            </Modal>\n        ), document.getElementById(MODAL_ROOT_ELEMENT));\n    }\n\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const {downloadURL} = ownProps;\n\n    return {\n        imageData: state.imageLoader[downloadURL]\n    }\n};\n\nexport default connect(mapStateToProps, {downloadImage})(ImageLoader);","import {LOAD_IMAGE, REQUEST_ERROR, REQUEST_LOADING, REQUEST_SUCCESS} from \"./types\";\nimport axiosInstance from \"../utils/API/API\";\n\nexport const downloadImage = (url) => dispatch => {\n    if (!url) throw new Error(\"Cannot have null url\");\n    dispatch({\n        type: LOAD_IMAGE,\n        status: REQUEST_LOADING,\n        payload: {\n            url\n        }\n    });\n\n    axiosInstance.get(url, {\n        responseType: 'arraybuffer'\n    }).then((res) => {\n        console.log(res);\n        const imgFile = new Blob([res.data]);\n        const imgUrl = URL.createObjectURL(imgFile);\n        dispatch({\n            type: LOAD_IMAGE,\n            status: REQUEST_SUCCESS,\n            payload: {\n                url,\n                data: imgUrl\n            }\n        })\n    }, (err) => {\n        dispatch({\n            type: LOAD_IMAGE,\n            status: REQUEST_ERROR,\n            payload: {\n                url,\n                error: err\n            }\n        })\n    });\n};","import React, {useState} from \"react\";\nimport {Button, Modal} from \"reactstrap\";\nimport * as ReactDOM from \"react-dom\";\nimport {MODAL_ROOT_ELEMENT} from \"../../../../utils/Constants\";\nimport * as PropTypes from \"prop-types\";\nimport ErrorBoundary from \"../../../../ErrorHandling/ErrorBoundary\";\n\nfunction AudioPlayer({playbackURL, MimeType}) {\n\n    const [preview, setPreview] = useState(true);\n\n    function hideFull(e) {\n        e.stopPropagation();\n        setPreview(!preview);\n\n    }\n\n    let element;\n    if (preview) {\n        element = (\n            <div className=\"img-thumbnail w-100 text-center\" data-test=\"audioPlayerWidget\">\n                <Button color=\"link\" onClick={hideFull}>\n                    {/*<i className=\"fa fa-play-circle fa-4x\"/>*/}\n                    <audio controls>\n                        <source src={playbackURL} type={MimeType}/>\n                        Your browser does not support the audio tag.\n                    </audio>\n                </Button>\n            </div>\n        )\n    } else {\n\n        // Load the video\n\n\n        element = ReactDOM.createPortal((\n            <Modal className=\"task-modal d-none d-sm-block\" data-test=\"videoPlayerWidget\" isOpen={!preview}\n                   toggle={hideFull}>\n\n\n                <audio controls>\n                    <source src={playbackURL} type={MimeType}/>\n                    Your browser does not support the audio tag.\n                </audio>\n\n            </Modal>\n        ), document.getElementById(MODAL_ROOT_ELEMENT));\n    }\n\n    return (\n        <ErrorBoundary>\n            {element}\n        </ErrorBoundary>\n    )\n\n\n}\n\nAudioPlayer.propTypes = {\n    playbackURL: PropTypes.string.isRequired,\n    MimeType: PropTypes.string.isRequired\n};\n\nexport default AudioPlayer;","import React from 'react';\nimport * as PropTypes from \"prop-types\";\nimport {PROP_CURRENT_PATH, PROP_FS_INFO} from \"../../../utils/RclonePropTypes\";\nimport VideoPlayer from \"../Widgets/VideoPlayer/VideoPlayer\";\nimport {IP_ADDRESS_KEY} from \"../../../utils/Constants\";\nimport {connect} from \"react-redux\";\nimport ImageLoader from \"../Widgets/ImageLoader/ImageLoader\";\nimport ErrorBoundary from \"../../../ErrorHandling/ErrorBoundary\";\nimport AudioPlayer from \"../Widgets/AudioPlayer/AudioPlayer\";\n\nexport function isMedia(MimeType) {\n    const mimeTypes = {\n        \"image/jpeg\": \"Image\",\n\n        \"video/mp4\": \"Video\",\n        \"video/webm\": \"Video\",\n        \"audio/webm\": \"Audio\",\n        \"video/ogg\": \"Video\",\n        \"application/ogg\": \"Unspecified\",\n\n\n        \"audio/mpeg\": \"Audio\",\n        \"audio/wav\": \"Audio\",\n        \"audio/mp4\": \"Audio\",\n    };\n\n    return mimeTypes[MimeType];\n}\n\nclass MediaWidget extends React.Component {\n\n\n    getRenderForItem = () => {\n        const {fsInfo, item, inViewport, currentPath} = this.props;\n        const {remoteName, remotePath} = currentPath;\n        const {MimeType} = item;\n\n        let downloadURL = \"\";\n\n        const ipAddress = localStorage.getItem(IP_ADDRESS_KEY);\n\n\n        if (fsInfo.Features.BucketBased) {\n            downloadURL = ipAddress + `[${remoteName}]/${remotePath}/${item.Name}`;\n\n        } else {\n\n            downloadURL = ipAddress + `[${remoteName}:${remotePath}]/${item.Name}`;\n\n        }\n\n        switch (MimeType) {\n            case \"image/jpeg\":\n\n                return (<ImageLoader item={item} downloadURL={downloadURL} inViewport={inViewport}/>);\n            case \"video/mp4\":\n            case \"video/webm\":\n            case \"audio/webm\":\n            case \"video/ogg\":\n            case \"application/ogg\":\n\n\n                return (<VideoPlayer playbackURL={downloadURL} MimeType={MimeType} currentPath={currentPath}/>);\n\n            case \"audio/mpeg\":\n            case \"audio/wav\":\n            case \"audio/mp4\":\n                return (<AudioPlayer playbackURL={downloadURL} MimeType={MimeType}/>);\n            default:\n                return null;\n\n        }\n    };\n\n\n    render() {\n        const {loadMedia, item} = this.props;\n        const {MimeType} = item;\n\n        let element = isMedia(MimeType) && loadMedia ? (\n            this.getRenderForItem()\n        ) : null;\n        return (\n            <ErrorBoundary>\n                {element}\n            </ErrorBoundary>\n        );\n    }\n}\n\nMediaWidget.propTypes = {\n    /**\n     * Load or skip loading any media\n     */\n    loadMedia: PropTypes.bool.isRequired,\n    /**\n     * Item: Contains the referenced item\n     */\n    item: PropTypes.object.isRequired,\n    /**\n     * FS Information\n     */\n    fsInfo: PROP_FS_INFO.isRequired,\n    /**\n     * Current Path\n     */\n    currentPath: PROP_CURRENT_PATH.isRequired,\n    /**\n     * Container ID\n     */\n    containerID: PropTypes.string.isRequired,\n    /**\n     * InViewPort tells whether the component is in the user's view\n     */\n    inViewport: PropTypes.bool.isRequired\n\n\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    const loadMedia = state.explorer.loadImages[ownProps.containerID];\n\n    let fsInfo = {};\n    const {remoteName} = currentPath;\n\n    if (currentPath && state.remote.configs) {\n\n        const tempRemoteName = remoteName.split(':')[0];\n        if (state.remote.configs[tempRemoteName])\n\n            fsInfo = state.remote.configs[tempRemoteName];\n    }\n    return {\n        currentPath,\n        fsInfo,\n        loadMedia\n    }\n};\n\nexport default connect(mapStateToProps, {})(MediaWidget);\n\n","import React from \"react\";\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardFooter,\n    DropdownItem,\n    DropdownMenu,\n    DropdownToggle,\n    UncontrolledButtonDropdown\n} from \"reactstrap\";\n\nimport {ItemTypes} from './Constants'\nimport {DragSource} from 'react-dnd'\nimport {formatBytes} from \"../../../utils/Tools\";\nimport {performCopyFile, performMoveFile} from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\nimport * as PropTypes from \"prop-types\";\nimport handleViewport from 'react-in-viewport';\nimport MediaWidget, {isMedia} from \"../../Base/MediaWidget/MediaWidget\";\nimport {PROP_ITEM} from \"../../../utils/RclonePropTypes\";\nimport ErrorBoundary from \"../../../ErrorHandling/ErrorBoundary\";\n\nasync function performCopyMoveOperation(params) {\n    const {srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir, dropEffect, updateHandler} = params;\n    if (dropEffect === \"move\") { /*Default operation without holding alt is copy, named as move in react-dnd*/\n        // if (component.props.canCopy) {\n        await performCopyFile(srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir);\n        updateHandler();\n        if (IsDir) {\n            toast.info(`Directory copying started in background: ${Name}`);\n        } else {\n            toast.info(`File copying started in background: ${Name}`);\n        }\n        // } else {\n        //     toast.error(\"This remote does not support copying\");\n        // }\n\n    } else {\n        // if (component.props.canMove) {\n        await performMoveFile(srcRemoteName, srcRemotePath, destRemoteName, destRemotePath, Name, IsDir);\n        updateHandler();\n        if (IsDir) {\n            toast.info(`Directory moving started in background: ${Name}`);\n        } else {\n            toast.info(`Directory moving started in background: ${Name}`);\n        }\n        // } else {\n        //     toast.error(\"This remote does not support moving\");\n        // }\n\n    }\n}\n\n\nconst fileComponentSource = {\n    canDrag(props) {\n\n        // You can disallow drag based on props\n        return true;\n    },\n    beginDrag(props) {\n        // console.log(\"props\", props, props.remoteName);\n        const {Name, Path, IsDir} = props.item;\n        return {\n            Name: Name, Path: Path, IsDir: IsDir, remoteName: props.remoteName, remotePath: props.remotePath\n        }\n    },\n\n    endDrag(props, monitor, component) {\n        // console.log(\"EndDrag\", monitor.getDropResult());\n        console.log(props, \"Component:\", component);\n        try {\n            if (monitor.getDropResult() && component) {\n                performCopyMoveOperation(monitor.getDropResult());\n            }\n        } catch (e) {\n            const error = e.response ? e.response : e;\n            console.log(JSON.stringify(error));\n\n            toast.error(`Error copying file(s). ${error}`, {\n                autoClose: false\n            });\n\n        }\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        connectDragPreview: connect.dragPreview(),\n        isDragging: monitor.isDragging()\n    }\n}\n\nfunction FileIcon({IsDir, MimeType}, ...props) {\n    let className = \"fa-file\";\n    if (IsDir) {\n        className = \"fa-folder\";\n    } else if (MimeType === \"application/pdf\") {\n        className = \"fa-file-pdf-o\";\n    } else if (MimeType === \"image/jpeg\") {\n        className = \"fa-file-image-o\";\n    } else if (MimeType === \"application/rar\" || MimeType === \"application/x-rar-compressed\" || MimeType === \" application/zip\") {\n        className = \"fa-file-archive-o\";\n    } else if (MimeType === \"text/plain\") {\n        className = \"fa-file-text-o\";\n    } else if (MimeType === \"text/x-vcard\") {\n        className = \"fa-address-card-o\";\n    }\n    return <i className={className + \" fa fa-lg\"}/>;\n}\n\nfunction confirmDelete(deleteHandle, item) {\n    if (window.confirm(`Are you sure you want to delete ${item.Name}`)) {\n        deleteHandle(item);\n    }\n}\n\nfunction Actions({downloadHandle, deleteHandle, item, linkShareHandle}) {\n\n    const {IsDir} = item;\n    // let {ID, Name} = item;\n    // // Using fallback as fileName when the ID is not available (for local file system)\n    // if (ID === undefined) {\n    //     ID = Name;\n    // }\n\n\n    if (!IsDir) {\n\n        return (\n            <React.Fragment>\n                <Button color=\"link\" onClick={() => downloadHandle(item)}>\n                    <i className={\"fa fa-cloud-download fa-lg d-inline\"}/>\n                </Button>\n                <Button color=\"link\">\n                    <i className=\"fa fa-info-circle\"/>\n                </Button>\n\n                <UncontrolledButtonDropdown>\n                    <DropdownToggle color=\"link\">\n                        <i className=\"fa fa-ellipsis-v\"/>\n                    </DropdownToggle>\n                    <DropdownMenu>\n                        <DropdownItem header>Actions</DropdownItem>\n                        <DropdownItem onClick={() => linkShareHandle(item)}><i\n                            className=\"fa fa-share fa-lg d-inline\"/> Share with link</DropdownItem>\n                        <DropdownItem divider/>\n                        <DropdownItem onClick={() => confirmDelete(deleteHandle, item)}><i\n                            className=\"fa fa-remove fa-lg d-inline text-danger\"/> Delete </DropdownItem>\n                    </DropdownMenu>\n                </UncontrolledButtonDropdown>\n            </React.Fragment>\n\n        );\n    } else {\n        return (\n            <React.Fragment>\n\n                <UncontrolledButtonDropdown>\n                    <DropdownToggle color=\"link\">\n                        <i className=\"fa fa-ellipsis-v\"/>\n                    </DropdownToggle>\n                    <DropdownMenu>\n                        <DropdownItem header>Actions</DropdownItem>\n                        <DropdownItem onClick={() => linkShareHandle(item)}><i\n                            className=\"fa fa-share fa-lg d-inline\"/> Share with link</DropdownItem>\n                        <DropdownItem divider/>\n                        <DropdownItem onClick={() => confirmDelete(deleteHandle, item)}><i\n                            className=\"fa fa-remove fa-lg d-inline text-danger\"/> Delete </DropdownItem>\n                    </DropdownMenu>\n                </UncontrolledButtonDropdown>\n            </React.Fragment>\n        )\n    }\n}\n\n/**\n * Main class for individual render of file/directory in the files view.\n */\n// Non used props are required for drag-and-drop functionality\nclass FileComponent extends React.Component {\n\n    /*\n    MimeTypes: https://www.freeformatter.com/mime-types-list.html\n    * {\n    * For Directory\n\t\t\t\"ID\": \"18DsZ4ne6XV3qwDZQCBj2nAEwouFMxudB\",\n\t\t\t\"IsDir\": true,\n\t\t\t\"MimeType\": \"inode/directory\",\n\t\t\t\"ModTime\": \"2019-02-12T14:23:33.440Z\",\n\t\t\t\"Name\": \"two pass 28-1-19\",\n\t\t\t\"Path\": \"two pass 28-1-19\",\n\t\t\t\"Size\": -1\n\t\t},\n\t\t*\n\t\t* // For non-directory\n\t\t* {\n\t\t\t\"ID\": \"1u4D6-UdxhJYY8AVd8FcTN2Tl73W1RXsk\",\n\t\t\t\"IsDir\": false,\n\t\t\t\"MimeType\": \"application/octet-stream\",\n\t\t\t\"ModTime\": \"2018-11-18T13:14:54.068Z\",\n\t\t\t\"Name\": \"streamlined-gdoc.gdoc\",\n\t\t\t\"Path\": \"streamlined-gdoc.gdoc\",\n\t\t\t\"Size\": 173\n\t\t},\n\n    * */\n\n    handleClick(IsDir, clickHandler, e, item) {\n        if (IsDir) {\n            clickHandler(e, item)\n        }\n    }\n    render() {\n        const {containerID, inViewport, item, loadImages, clickHandler, downloadHandle, linkShareHandle, deleteHandle, connectDragSource, gridMode, itemIdx /*isDragging, remoteName*/} = this.props;\n\n        const {IsDir, MimeType, ModTime, Name, Size} = item;\n\n\n        let modTime = new Date(Date.parse(ModTime));\n        let element;\n        if (gridMode === \"card\") {\n            element = connectDragSource(\n                <div className={IsDir ? \"\" : \"col-md-4\"}>\n                    <Card>\n                        <CardBody onClick={(e) => this.handleClick(IsDir, clickHandler, e, item)}>\n\n                            {loadImages && isMedia(MimeType) ?\n                                <MediaWidget containerID={containerID} item={item} inViewport={inViewport}/> :\n                                <FileIcon IsDir={IsDir} MimeType={MimeType}/>\n                            }\n                            {Name}\n                        </CardBody>\n                        <CardFooter>\n                            <Actions downloadHandle={downloadHandle} linkShareHandle={linkShareHandle}\n                                     deleteHandle={deleteHandle} item={item}/>\n                        </CardFooter>\n                    </Card>\n                </div>\n            )\n        } else {\n            element = connectDragSource(\n                <tr className={\"pointer-cursor\"}>\n                    <td className=\"d-none d-md-table-cell\"><input type=\"checkbox\"/></td>\n                    <td onClick={(e) => clickHandler(e, item)} id={\"file\" + itemIdx}>\n                        <FileIcon IsDir={IsDir} MimeType={MimeType}/> {Name}\n\n\n                    </td>\n                    <td>{Size === -1 ? \"-\" : formatBytes(Size, 2)}</td>\n                    <td className=\"d-none d-md-table-cell\">{modTime.toLocaleDateString()}</td>\n                    <td><Actions downloadHandle={downloadHandle} linkShareHandle={linkShareHandle}\n                                 deleteHandle={deleteHandle} item={item}/></td>\n                </tr>\n            )\n        }\n        return <ErrorBoundary>\n            {element}\n        </ErrorBoundary>;\n    }\n}\n\n\nFileComponent.propTypes = {\n    /**\n     * Item as returned from the rclone backend\n     */\n    item: PROP_ITEM.isRequired,\n    /**\n     * Function which handles the clicks on the current item.\n     */\n    clickHandler: PropTypes.func.isRequired,\n    /**\n     * Function to handle the download of the current file\n     */\n    downloadHandle: PropTypes.func.isRequired,\n    /**\n     * Function to delete a file.\n     */\n    deleteHandle: PropTypes.func.isRequired,\n    /**\n     * Function to share the link of a file.\n     */\n    linkShareHandle: PropTypes.func.isRequired,\n    /**\n     * Name of the remote containing the {item}.\n     */\n    remoteName: PropTypes.string.isRequired,\n    /**\n     * Remote path of the current item. remoteName + remotePath gives the full path.\n     */\n    remotePath: PropTypes.string.isRequired,\n    /**\n     * Denotes the current grid mode:\n     * card: Card mode with Media support.\n     */\n    gridMode: PropTypes.string,\n    /**\n     * Container ID of the FilesExplorer this component is contained in.\n     */\n    containerID: PropTypes.string.isRequired,\n    /**\n     * Boolean value to represent if the current item can be moved to another destination.\n     */\n    canMove: PropTypes.bool.isRequired,\n    /**\n     * Boolean value to represent if the current item can be copied to another destination.\n     */\n    canCopy: PropTypes.bool.isRequired,\n    /**\n     * Boolean value to represent if loading media files is enabled by the user.\n     */\n    loadImages: PropTypes.bool.isRequired,\n    /**\n     * Boolean value to represent if the current remote is bucketbased, the url of a bucket based remote is different.\n     */\n    isBucketBased: PropTypes.bool.isRequired\n\n};\n\n/**\n * Handles view port to check if the current item is visible on the screen.\n */\nconst MyViewPort = handleViewport(FileComponent, {rootMargin: '-1.0px'});\n\nexport default DragSource(ItemTypes.FILECOMPONENT, fileComponentSource, collect)(MyViewPort);\n","import React from \"react\";\nimport {Button, Input, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\nimport * as PropTypes from \"prop-types\";\n\n\nclass LinkShareModal extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            copySuccess: \"\"\n        };\n\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n    copyToClipboard = () => {\n        let textField = document.createElement('textarea');\n        textField.innerText = this.props.linkUrl;\n        document.body.appendChild(textField);\n        textField.select();\n        document.execCommand('copy');\n        textField.remove();\n    };\n\n    handleFocus = (event) => event.target.select();\n\n    render() {\n        const {isVisible, linkUrl} = this.props;\n        const {copySuccess} = this.state;\n        let isCopyAllowed = (document && document.queryCommandSupported) ? document.queryCommandSupported('copy') : true;\n\n        return (\n            <div>\n                <Modal isOpen={isVisible} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle} data-test=\"modalHeader\">Public link generated.</ModalHeader>\n                    <ModalBody data-test=\"modalBody\">\n                        <Input readOnly value={linkUrl} onFocus={this.handleFocus}/>\n                        {\n\n                            /* Logical shortcut for only displaying the\n                               button if the copy command exists */\n                            isCopyAllowed &&\n                            <div>\n                                <Button color=\"link\" onClick={this.copyToClipboard}><i\n                                    className=\"fa fa-clipboard fa-2x\"/></Button>\n                            </div>\n                        }\n                        {copySuccess}\n                    </ModalBody>\n                    <ModalFooter data-test=\"modalFooter\">\n                        <Button color=\"primary\" onClick={this.toggle}>Done</Button>{' '}\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nLinkShareModal.propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired,\n    linkUrl: PropTypes.string.isRequired\n};\nLinkShareModal.defaultProps = {\n    isVisible: true,\n};\n\nexport default LinkShareModal;","import React from \"react\";\n\nfunction ScrollableDiv({height, children}) {\n    return (\n        <div style={{overflow: \"auto\", height: height}}>\n            {children}\n        </div>)\n}\n\nexport default ScrollableDiv;\n","import React from \"react\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {Alert, Button, Col, Container, Row, Spinner, Table} from \"reactstrap\";\nimport {DropTarget} from \"react-dnd\";\nimport FileComponent from \"./FileComponent\";\nimport {ItemTypes} from \"./Constants\";\nimport {toast} from \"react-toastify\";\nimport {addColonAtLast, changeListVisibility, changeSearchFilter, isEmpty} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport {getFiles} from \"../../../actions/explorerActions\";\nimport {compose} from \"redux\";\nimport {changePath, navigateUp} from \"../../../actions/explorerStateActions\";\nimport LinkShareModal from \"../../Base/LinkShareModal/LinkShareModal\";\nimport ScrollableDiv from \"../../Base/ScrollableDiv/ScrollableDiv\";\nimport {FILES_VIEW_HEIGHT} from \"../../../utils/Constants\";\nimport {PROP_CURRENT_PATH, PROP_FS_INFO} from \"../../../utils/RclonePropTypes\";\nimport * as PropTypes from 'prop-types';\nimport ErrorBoundary from \"../../../ErrorHandling/ErrorBoundary\";\nimport urls from \"../../../utils/API/endpoint\";\n\n\n/*\n* Start code for react DND\n* */\n\nconst filesTarget = {\n    drop(props, monitor, component) {\n        if (monitor.didDrop()) return;\n        // console.log(\"drop\", props, monitor, monitor.getItem(), component);\n\n        let {Name, Path, IsDir, remoteName} = monitor.getItem();\n\n        let srcRemoteName = addColonAtLast(remoteName);\n        let srcRemotePath = Path;\n        let destRemoteName = addColonAtLast(props.currentPath.remoteName);\n        let destRemotePath = props.currentPath.remotePath;\n\n        // console.log(\"drop:this\", this);\n\n        return {\n            srcRemoteName,\n            srcRemotePath,\n            destRemoteName,\n            destRemotePath,\n            Name,\n            IsDir,\n            updateHandler: component.updateHandler\n        }\n\n    },\n    canDrop(props, monitor) {\n        const {remoteName, remotePath} = monitor.getItem();\n        console.log(remoteName, props.currentPath.remoteName, remotePath, props.currentPath.remotePath);\n        const destRemoteName = props.currentPath.remoteName;\n        const destRemotePath = props.currentPath.remotePath;\n        if (destRemoteName === remoteName) {\n            return destRemotePath !== remotePath;\n        }\n        return true;\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDropTarget: connect.dropTarget(),\n        isOver: monitor.isOver(),\n        canDrop: monitor.canDrop()\n    }\n}\n\nfunction renderOverlay() {\n    return (\n        <div\n            style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                height: '100%',\n                width: '100%',\n                zIndex: 1,\n                opacity: 0.5,\n                backgroundColor: 'gray',\n            }}\n        />\n    );\n}\n\n/*\n* END code for react DND\n* */\n\n// Provides the up button view in the files view\nfunction UpButtonComponent({upButtonHandle, gridMode}) {\n    if (gridMode === \"card\") {\n        return (\n            <Col lg={12}>\n                <Button onClick={() => upButtonHandle()}>Go Up</Button>\n            </Col>\n        )\n    } else {\n        return (\n            <tr onClick={() => upButtonHandle()} className={\"pointer-cursor\"}>\n                <td colSpan={1}/>\n                <td colSpan={4}><i className={\"fa fa-file-o\"}/> Go Up...</td>\n            </tr>);\n    }\n}\n\n/**\n * FilesView component renders files in the file explorer.\n */\nclass FilesView extends React.PureComponent {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            isDownloadProgress: false,\n            downloadingItems: 0,\n            shouldUpdate: true,\n            showLinkShareModal: false,\n            generatedLink: \"\",\n\n        };\n        this.handleFileClick = this.handleFileClick.bind(this);\n        this.downloadHandle = this.downloadHandle.bind(this);\n        this.deleteHandle = this.deleteHandle.bind(this);\n    }\n\n    closeLinkShareModal = () => {\n        this.setState({\n            showLinkShareModal: false\n        })\n    };\n\n    showLinkShareModal = () => {\n        this.setState({\n            showLinkShareModal: true\n\n        })\n    };\n\n\n    handleFileClick(e, item) {\n        const {Path, IsDir, IsBucket} = item;\n        if (IsDir || IsBucket) {\n            this.updateRemotePath(Path, IsDir, IsBucket);\n        } else {\n            this.downloadHandle(item);\n        }\n\n    }\n\n    updateRemotePath(newRemotePath, IsDir, IsBucket) {\n        const {remoteName} = this.props.currentPath;\n\n        let updateRemoteName = \"\";\n        let updateRemotePath = \"\";\n\n\n        if (IsBucket) {\n            updateRemoteName = addColonAtLast(remoteName) + newRemotePath;\n            updateRemotePath = \"\";\n            // backStack.push({remoteName: addColonAtLast(backStack.peek().remoteName) + remotePath, remotePath: \"\"});\n\n        } else if (IsDir) {\n            updateRemoteName = remoteName;\n            updateRemotePath = newRemotePath;\n            // backStack.push({remoteName: backStack.peek().remoteName, remotePath: remotePath});\n        }\n        this.props.changePath(this.props.containerID, updateRemoteName, updateRemotePath);\n    }\n\n\n    getFilesList(showLoading = true) {\n        const {remoteName, remotePath} = this.props.currentPath;\n\n        this.props.getFiles(remoteName, remotePath);\n\n    }\n\n    async downloadHandle(item) {\n        // let {remoteName, remotePath} = this.props;\n        let {remoteName, remotePath} = this.props.currentPath;\n        const {fsInfo} = this.props;\n        let downloadUrl = \"\";\n        if (fsInfo.Features.BucketBased) {\n            downloadUrl = `/[${remoteName}]/${remotePath}/${item.Name}`;\n\n        } else {\n            downloadUrl = `/[${remoteName}:${remotePath}]/${item.Name}`;\n        }\n\n        this.setState((prevState) => {\n            return {\n                downloadingItems: prevState.downloadingItems + 1,\n                isDownloadProgress: true\n            };\n        });\n\n        let response = await axiosInstance({\n            url: downloadUrl,\n            method: 'GET',\n            responseType: 'blob',\n        });\n\n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', item.Name);\n        document.body.appendChild(link);\n        link.click();\n\n        this.setState((prevState) => {\n            return {\n                downloadingItems: prevState.downloadingItems - 1,\n            };\n        }, () => {\n            if (this.state.downloadingItems === 0) {\n                this.setState({isDownloadProgress: false})\n            }\n        });\n    }\n\n    async deleteHandle(item) {\n        let {remoteName} = this.props.currentPath;\n\n        const data = {\n            fs: addColonAtLast(remoteName),\n            remote: item.Path,\n        };\n        try {\n            if (item.IsDir) {\n\n                await axiosInstance.post(urls.purge, data);\n\n                this.updateHandler();\n                toast.info(`${item.Name} deleted.`);\n\n            } else {\n\n                await axiosInstance.post(urls.deleteFile, data);\n                this.updateHandler();\n                toast.info(`${item.Name} deleted.`, {\n                    autoClose: false\n                });\n            }\n        } catch (e) {\n            // console.log(`Error in deleting file`);\n            toast.error(`Error deleting file. ${e}`, {\n                autoClose: false\n            });\n        }\n\n    }\n\n    updateHandler = () => {\n\n        const {remoteName, remotePath} = this.props.currentPath;\n        this.getFilesList(remoteName, remotePath);\n    };\n\n    dismissAlert = (e) => {\n        this.setState({isDownloadProgress: false});\n    };\n\n    linkShareHandle = (item) => {\n        const {fsInfo} = this.props;\n        if (fsInfo.Features.PublicLink) {\n            // console.log(\"Sharing link\" + item.Name);\n            const {remoteName} = this.props.currentPath;\n            axiosInstance.post(urls.createPublicLink, {\n                fs: addColonAtLast(remoteName),\n                remote: item.Path\n            }).then((res) => {\n                // console.log(\"Public Link: \" + res.data.url);\n\n                this.setState({\n                    generatedLink: res.data.url,\n                    showLinkShareModal: true\n                })\n            }, (error) => {\n                toast.error(\"Error Generating link: \" + error)\n            })\n        } else {\n            toast.error(\"This remote does not support public link\");\n        }\n\n    };\n\n    getFileComponents = (isDir) => {\n        const {files, containerID, gridMode, fsInfo, loadImages} = this.props;\n        const {remoteName, remotePath} = this.props.currentPath;\n        // console.log(fsInfo, files);\n        if (fsInfo && !isEmpty(fsInfo)) {\n            return files.map((item, idx) => {\n                let {ID, Name} = item;\n                // Using fallback as fileName when the ID is not available (for local file system)\n                if (ID === undefined) {\n                    ID = Name;\n                }\n                if (item.IsDir === isDir) {\n                    return (\n                        <React.Fragment key={ID}>\n                            <FileComponent item={item} clickHandler={this.handleFileClick}\n                                           downloadHandle={this.downloadHandle} deleteHandle={this.deleteHandle}\n                                           remoteName={remoteName} remotePath={remotePath} gridMode={gridMode}\n                                           containerID={containerID}\n                                           linkShareHandle={this.linkShareHandle}\n                                           loadImages={loadImages}\n                                           isBucketBased={fsInfo.Features.BucketBased}\n                                           canCopy={fsInfo.Features.Copy} canMove={fsInfo.Features.Move} itemIdx={idx}>\n\n                            </FileComponent>\n                        </React.Fragment>\n                    );\n                }\n                return null;\n            });\n        }\n    };\n\n\n    render() {\n        const {isLoading, isDownloadProgress, downloadingItems, generatedLink, showLinkShareModal} = this.state;\n        const {connectDropTarget, isOver, files, navigateUp, containerID, gridMode, canDrop} = this.props;\n        const {remoteName} = this.props.currentPath;\n\n        // console.log(this.props.searchQuery);\n\n        if (isLoading || !files) {\n            return (<div><Spinner color=\"primary\"/> Loading</div>);\n        } else {\n\n\n            if (remoteName === \"\") {\n                return (<div>No remote is selected. Select a remote from above to show files.</div>);\n            }\n\n\n            let dirComponentMap = this.getFileComponents(true);\n\n            let fileComponentMap = this.getFileComponents(false);\n\n            let renderElement = \"\";\n\n            if (gridMode === \"card\") {\n\n                renderElement = (\n\n                    <Container fluid={true}>\n                        <Row>\n                            <UpButtonComponent upButtonHandle={() => navigateUp(containerID)} gridMode={gridMode}/>\n                        </Row>\n                        <Row>\n                            <Col lg={3}>\n                                <h3>Directories</h3>\n                                <ScrollableDiv height={FILES_VIEW_HEIGHT}>\n                                    {dirComponentMap}\n                                </ScrollableDiv>\n                            </Col>\n                            <Col lg={9}>\n                                <h3>Files</h3>\n                                <ScrollableDiv height={FILES_VIEW_HEIGHT}>\n                                    <Row>\n                                        {fileComponentMap}\n                                    </Row>\n                                </ScrollableDiv>\n                            </Col>\n\n                        </Row>\n\n\n                    </Container>\n\n                )\n            } else {\n\n\n                renderElement = (\n\n\n                    <Container fluid={true} className={\"pd-0\"}>\n                        <ScrollableDiv height={FILES_VIEW_HEIGHT}>\n\n                            <Table className=\"table-responsive-sm\">\n                                <thead>\n                                <tr>\n                                    <th className=\"d-none d-md-table-cell\">x</th>\n                                    <th>Name</th>\n                                    <th>Size</th>\n                                    <th className=\"d-none d-md-table-cell\">Modified</th>\n                                    <th>Actions</th>\n                                </tr>\n                                </thead>\n                                <tbody>\n                                <UpButtonComponent upButtonHandle={() => navigateUp(containerID)} gridMode={gridMode}/>\n                                {files.length > 0 ? (\n                                        <React.Fragment>\n                                            <tr>\n                                                <td colSpan={1} className=\"d-none d-md-block\"/>\n                                                <th colSpan={4}>Directories</th>\n                                            </tr>\n                                            {dirComponentMap}\n                                            <tr>\n                                                <td className=\"d-none d-md-table-cell\"/>\n                                                <th>Files</th>\n                                                <td className=\"d-none d-md-table-cell\"/>\n                                                <td/>\n                                                <td/>\n                                            </tr>\n                                            {fileComponentMap}\n                                        </React.Fragment>\n                                    ) :\n                                    <tr>\n                                        <td colSpan={1} className=\"d-none d-md-table-cell\"/>\n                                        <th colSpan={4}>Files</th>\n                                    </tr>\n                                }\n                                </tbody>\n                            </Table>\n                        </ScrollableDiv>\n                    </Container>\n\n\n                );\n            }\n\n\n            return connectDropTarget(\n                <div className={\"row\"}>\n                    {isOver && canDrop && renderOverlay()}\n                    <ErrorBoundary>\n\n                        <Alert color=\"info\" isOpen={isDownloadProgress} toggle={this.dismissAlert} sm={12}\n                               lg={12}>\n                            Downloading {downloadingItems} file(s). Please wait.\n                        </Alert>\n\n                        {renderElement}\n\n                        <LinkShareModal closeModal={this.closeLinkShareModal} isVisible={showLinkShareModal}\n                                        linkUrl={generatedLink}/>\n                    </ErrorBoundary>\n                </div>\n            );\n        }\n    }\n\n}\n\nconst propTypes = {\n    containerID: PropTypes.string.isRequired,\n    currentPath: PROP_CURRENT_PATH.isRequired,\n    fsInfo: PROP_FS_INFO,\n    gridMode: PropTypes.string,\n    searchQuery: PropTypes.string,\n    loadImages: PropTypes.bool.isRequired\n};\n\nconst defaultProps = {\n};\n\n\nFilesView.propTypes = propTypes;\nFilesView.defaultProps = defaultProps;\n\n\nconst mapStateToProps = (state, ownProps) => {\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    const visibilityFilter = state.explorer.visibilityFilters[ownProps.containerID];\n    const gridMode = state.explorer.gridMode[ownProps.containerID];\n    const searchQuery = state.explorer.searchQueries[ownProps.containerID];\n    const loadImages = state.explorer.loadImages[ownProps.containerID];\n\n    let fsInfo = {};\n    const {remoteName, remotePath} = currentPath;\n\n    if (currentPath && state.remote.configs) {\n\n        const tempRemoteName = remoteName.split(':')[0];\n        if (state.remote.configs[tempRemoteName])\n\n            fsInfo = state.remote.configs[tempRemoteName];\n    }\n\n    const pathKey = `${remoteName}-${remotePath}`;\n\n    let files = state.remote.files[pathKey];\n\n    if (files) {\n        files = files.files;\n        // Filter according to visibility filters\n        if (visibilityFilter) {\n            files = changeListVisibility(files, visibilityFilter);\n        }\n\n        //Filter according to search query, if ny\n        if (searchQuery) {\n            files = changeSearchFilter(files, searchQuery);\n        }\n    }\n\n    return {\n        files,\n        currentPath,\n        fsInfo,\n        gridMode,\n        searchQuery,\n        loadImages\n    }\n};\n\nexport default compose(\n    connect(\n        mapStateToProps, {getFiles, navigateUp, changePath}\n    ),\n    DropTarget(ItemTypes.FILECOMPONENT, filesTarget, collect)\n)(FilesView)\n","import React from 'react';\nimport {Button, Col, Form, FormGroup, Input, Label, Modal, ModalBody, ModalHeader} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\nimport {addColonAtLast} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport {getFilesForContainerID} from \"../../../actions/explorerStateActions\";\nimport urls from \"../../../utils/API/endpoint\";\n\n\nclass NewFolder extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            disableForm: false\n        };\n        this.createNewFolder = this.createNewFolder.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.toggle = this.toggle.bind(this);\n\n    }\n\n    disableForm = (shouldDisable) => {\n        this.setState({disableForm: shouldDisable});\n    };\n\n    async createNewFolder() {\n\n        // console.log(\"Form Submitted\");\n        let {name} = this.state;\n        let {remoteName, remotePath} = this.props.currentPath;\n        const {fsInfo} = this.props;\n\n        remoteName = addColonAtLast(remoteName);\n\n        // remotePath = this.state.name;\n        try {\n            // console.log(\"fsInfo\", fsInfo);\n            if (fsInfo.Features.BucketBased && remotePath === \"\") {/*Trying to create a bucket, not a dir*/\n                remoteName += name;\n            } else { /*Normal directory*/\n                if (remotePath === \"\") {\n                    remotePath = name;\n                } else {\n                    remotePath += \"/\" + name;\n                }\n            }\n            const data = {\n                fs: remoteName,\n                remote: remotePath\n            };\n\n            /*Disable form submit button*/\n            this.disableForm(true);\n\n            /*Network Request*/\n            await axiosInstance.post(urls.mkdir, data);\n\n            this.disableForm(false);\n\n            this.toggle();\n            toast.info(`Folder created: ${remotePath}`);\n            this.props.getFilesForContainerID(this.props.containerID);\n        } catch (error) {\n            this.disableForm(false);\n\n            if (error.response) {\n                toast.error(`Error creating folder: ${error.response.data.error}`)\n            } else {\n                toast.error(`Error creating folder: ${error}`);\n            }\n\n            // console.log(`Error occurred at operations/mkdir: ${e}, ${e.response}`);\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.createNewFolder();\n    }\n\n    changeName = e => {\n        const value = e.target.value;\n        this.setState(\n            {name: value}\n        );\n    };\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n    render() {\n        const {name, disableForm} = this.state;\n        const {isVisible, currentPath} = this.props;\n        return (\n\n            <Modal isOpen={isVisible} toggle={this.toggle} data-test=\"newFolderComponent\">\n                <Form onSubmit={this.handleSubmit}>\n                    <ModalHeader toggle={this.toggle}>Create New folder\n                        at {currentPath.remoteName}: {currentPath.remotePath}</ModalHeader>\n                    <ModalBody>\n                        <FormGroup row>\n                            <Label for=\"folderName\" sm={5}>Enter the name</Label>\n                            <Col sm={7}>\n                                <Input type=\"text\" name=\"folderName\" id=\"folderName\" value={name}\n                                       onChange={this.changeName} required autoFocus>\n                                </Input>\n                            </Col>\n                        </FormGroup>\n                        <div className=\"clearfix\">\n                            <Button type=\"submit\" color=\"success\" className=\"float-right\" disabled={disableForm}><i\n                                className=\"fa fa-check fa-lg\"/>Create folder</Button>\n                        </div>\n                        {/*<Input type={\"text\"} value={name} onChange={this.changeName}*/}\n                        {/*       ref={(input) => this.NameInput = input}/>*/}\n                    </ModalBody>\n                </Form>\n            </Modal>\n\n        );\n    }\n\n}\n\nconst propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired,\n    containerID: PropTypes.string.isRequired,\n    getFilesForContainerID: PropTypes.func.isRequired\n};\n\n\nNewFolder.propTypes = propTypes;\n\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n    return {\n        currentPath,\n        fsInfo\n    }\n};\n\nexport default connect(mapStateToProps, {getFilesForContainerID})(NewFolder);","import React from 'react';\nimport {\n    Button,\n    ButtonDropdown,\n    ButtonGroup,\n    Col,\n    DropdownItem,\n    DropdownMenu,\n    DropdownToggle,\n    Input,\n    InputGroup,\n    InputGroupAddon,\n    Modal,\n    ModalBody,\n    ModalFooter,\n    ModalHeader,\n    Row,\n    Spinner,\n    UncontrolledTooltip\n} from \"reactstrap\";\nimport NewFolder from \"../NewFolder/NewFolder\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {\n    changeGridMode,\n    changeVisibilityFilter,\n    getFilesForContainerID,\n    navigateBack,\n    navigateFwd,\n    setLoadImages,\n    setSearchQuery\n} from \"../../../actions/explorerStateActions\";\nimport {visibilityFilteringOptions} from \"../../../utils/Constants\";\nimport {getAbout} from \"../../../actions/providerStatusActions\";\nimport {Doughnut} from \"react-chartjs-2\";\nimport {addColonAtLast, bytesToGB, isEmpty, isLocalRemoteName} from \"../../../utils/Tools\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {toast} from \"react-toastify\";\nimport {PROP_FS_INFO} from \"../../../utils/RclonePropTypes\";\nimport urls from \"../../../utils/API/endpoint\";\n\n/**\n * File Operations component which handles user actions for files in the remote.( Visibility, gridmode, back, forward etc)\n */\nclass FileOperations extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newFolderModalIsVisible: false,\n            isAboutModalOpen: false,\n            dropdownOpen: false\n        };\n        this.filterOptions = visibilityFilteringOptions;\n    }\n\n    openNewFolderModal = () => {\n        const {fsInfo} = this.props;\n        if (fsInfo && fsInfo.Features && fsInfo.Features.CanHaveEmptyDirectories) {\n            this.setState({newFolderModalIsVisible: true});\n        } else {\n            toast.error(\"This remote cannot have empty directories\");\n        }\n    };\n\n    closeNewFolderModal = () => {\n        this.setState({newFolderModalIsVisible: false});\n    };\n\n    handleChangeFilter = (e) => {\n        const newFilter = e.target.value;\n\n        const {changeVisibilityFilter} = this.props;\n\n        changeVisibilityFilter(this.props.containerID, newFilter);\n        this.toggleDropDown();\n\n    };\n\n\n    handleChangeGridMode = (e) => {\n\n        const gridMode = e.target.value;\n\n        const {changeGridMode} = this.props;\n\n        changeGridMode(this.props.containerID, gridMode);\n        this.toggleDropDown();\n\n    };\n\n    changeSearch = (e) => {\n        e.preventDefault();\n        const {containerID} = this.props;\n        this.props.setSearchQuery(containerID, e.target.value);\n    };\n\n\n    toggleDropDown = () => {\n        this.setState((prevState) => {\n            return {\n                dropdownOpen: !prevState.dropdownOpen\n            }\n        })\n    };\n\n    toggleAboutModal = () => {\n        const {fsInfo} = this.props;\n        if (fsInfo && fsInfo.Features && fsInfo.Features.About) {\n            this.setState((prevState) => {\n                return {\n                    isAboutModalOpen: !prevState.isAboutModalOpen\n                }\n            }, () => {\n                if (this.state.isAboutModalOpen) {\n                    const {containerID} = this.props;\n                    this.props.getAbout(containerID);\n                }\n            });\n        } else {\n            toast.error(\"This remote does not support About\");\n        }\n\n    };\n\n    handleCleanTrash = () => {\n        const {fsInfo} = this.props;\n        if (fsInfo && fsInfo.Features && fsInfo.Features.CleanUp) {\n\n            if (window.confirm(\"Are you sure you want to clear the trash. This operation cannot be undone\")) {\n\n                const {currentPath, containerID} = this.props;\n                let {remoteName} = currentPath;\n\n                if (!isLocalRemoteName(remoteName)) {\n                    remoteName = addColonAtLast(remoteName);\n                }\n\n                axiosInstance.post(urls.cleanUpRemote, {\n                    fs: remoteName\n                }).then((res) => {\n                        if (res.status === 200) {\n                            toast('Trash Cleaned');\n                            this.props.getAbout(containerID);\n\n                        }\n                    },\n                    (err) => {\n                        toast.error(\"Error clearing trash\");\n                    }\n                )\n            }\n        } else {\n            // Cleanup is not allowed\n            toast.error(\"Clearing trash is not allowed on this remote\");\n        }\n    };\n\n    changeLoadMedia = (e) => {\n        e.stopPropagation();\n        // console.log(e);\n        const {setLoadImages, containerID, loadImages} = this.props;\n        setLoadImages(containerID, !loadImages);\n    };\n\n\n    render() {\n        const {containerID, loadImages, getFilesForContainerID, visibilityFilter, gridMode, navigateFwd, navigateBack, searchQuery, currentPath, doughnutData} = this.props;\n        const {newFolderModalIsVisible, dropdownOpen, isAboutModalOpen} = this.state;\n\n        const {remoteName, remotePath} = currentPath;\n\n        return (\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item active\">{remoteName}:/</li>\n\n                    {remotePath}\n                    <li className=\"breadcrumb-menu\">\n                        <div className=\"btn-group\" role=\"group\"\n                             aria-label=\"Button group with nested dropdown\">\n                            {/*<a className=\"btn\" href=\"#\"><i className=\"cui-speech\"></i></a>*/}\n                            {/*<a className=\"btn\" href=\"#\"><i className=\"cui-graph\"></i> Dashboard</a>*/}\n                            <Button onClick={this.toggleAboutModal} className=\"btn\"><i\n                                className=\"cui-settings\"/> Settings</Button>\n                        </div>\n                    </li>\n                </ol>\n                <div>\n                    <Button color=\"light\" className={\"mr-1 btn-outline-dark\"}\n                            onClick={() => navigateBack(containerID)}><i\n                        className={\"fa fa-lg fa-angle-left\"}/></Button>\n                    <Button color=\"light\" className={\"mr-1 btn-outline-dark\"}\n                            onClick={() => navigateFwd(containerID)}><i\n                        className={\"fa fa-lg fa-angle-right\"}/></Button>\n\n\n                    <div className=\"float-right mb-3 mt-1 form-inline\">\n\n                        <ButtonGroup>\n                            <Button className=\"mr-1 btn-outline-dark\" onClick={this.openNewFolderModal}><i\n                                className={\"fa fa-lg fa-plus\"}/> </Button>\n                            <Button className=\"mr-1 btn-outline-dark\"\n                                    onClick={() => getFilesForContainerID(containerID)}><i\n                                className={\"fa fa-lg fa-repeat\"}/></Button>\n                            <Button className={\"mr-1 \" + (loadImages ? \"btn-dark\" : \"btn-outline-dark\")}\n                                    onClick={this.changeLoadMedia}><i\n                                className={\"fa fa-lg fa-picture-o\"} id=\"LoadMediaButton\"/></Button>\n                            <UncontrolledTooltip placement=\"right\" target=\"LoadMediaButton\">\n                                Load Media\n                            </UncontrolledTooltip>\n                            <InputGroup>\n                                <InputGroupAddon addonType=\"prepend\">\n                                    <Button style={{zIndex: 1}} type=\"button\" color=\"primary\"><i\n                                        className=\"fa fa-search\"/> Search</Button>\n                                </InputGroupAddon>\n                                <Input type=\"text\" id=\"input1-group2\" placeholder=\"Search\" value={searchQuery}\n                                       onChange={this.changeSearch}/>\n                            </InputGroup>\n                            <ButtonDropdown isOpen={dropdownOpen} toggle={this.toggleDropDown}>\n                                <DropdownToggle caret>\n                                    More\n                                </DropdownToggle>\n                                <DropdownMenu>\n                                    <DropdownItem>View Type{' '}\n                                        <Input type={\"select\"} onClick={(e) => e.stopPropagation()}\n                                               onChange={this.handleChangeGridMode} value={gridMode}>\n                                            <option value={\"grid\"}>Table</option>\n                                            <option value={\"card\"}>Card</option>\n                                        </Input>\n\n                                    </DropdownItem>\n                                    <DropdownItem>File Filter{' '}\n                                        <Input type={\"select\"}\n                                               onClick={(e) => e.stopPropagation()/*Stop propagation is required to prevent parent dropdown from closing.*/}\n                                               onChange={this.handleChangeFilter} value={visibilityFilter}\n                                               className=\"ml-1 mr-1\">\n                                            <option key={0}>None</option>\n                                            {\n                                                this.filterOptions.map((item, idx) => {\n                                                    return (<option key={item} value={item}>{item}</option>)\n                                                })\n                                            }\n                                        </Input>\n                                    </DropdownItem>\n                                    {/*{gridMode !== \"grid\" &&*/}\n                                    {/*<DropdownItem onClick={this.changeLoadMedia}>Load Media{' '}*/}\n\n                                    {/*    <Input id={\"loadImg\" + containerID} checked={loadImages} type=\"checkbox\"*/}\n                                    {/*           onClick={(e) => e.stopPropagation()}*/}\n                                    {/*           onChange={this.changeLoadMedia/*Stop propagation is required to prevent parent dropdown from closing.*!/*/}\n                                    {/*           className=\"ml-1 mr-1\">*/}\n                                    {/*    </Input>*/}\n                                    {/*</DropdownItem>*/}\n                                    {/*}*/}\n                                </DropdownMenu>\n\n                            </ButtonDropdown>\n                        </ButtonGroup>\n\n\n                        <NewFolder containerID={containerID} isVisible={newFolderModalIsVisible}\n                                   closeModal={this.closeNewFolderModal}/>\n\n                        <Modal isOpen={isAboutModalOpen} toggle={this.toggleAboutModal}>\n                            <ModalHeader>\n                                Status for {remoteName}\n                            </ModalHeader>\n                            <ModalBody>\n                                <Row>\n                                    <Col sm={12}>\n                                        <div className=\"chart-wrapper\">\n                                            <p>Space Usage (in GB)</p>\n                                            {doughnutData && !isEmpty(doughnutData) ? <Doughnut data={doughnutData}/> :\n                                                <React.Fragment><Spinner color=\"primary\"/>Loading</React.Fragment>}\n                                        </div>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col sm={12}>\n                                        <Button color=\"danger\" onClick={this.handleCleanTrash}>Clean Trash <i\n                                            className=\"fa fa-lg fa-trash\"/></Button>\n                                    </Col>\n                                </Row>\n\n                            </ModalBody>\n                            <ModalFooter>\n\n                            </ModalFooter>\n\n                        </Modal>\n\n                    </div>\n                </div>\n            </nav>\n\n\n        );\n    }\n}\n\nFileOperations.propTypes = {\n    /**\n     * Container ID of the current remote explorer\n     */\n    containerID: PropTypes.string.isRequired,\n    /**\n     * Redux function to change the visibility of images/ pdf etc.\n     */\n    changeVisibilityFilter: PropTypes.func.isRequired,\n    /**\n     * The current visibility filter setting\n     */\n    visibilityFilter: PropTypes.string,\n    /**\n     * Render mode: Grid/Card\n     */\n    gridMode: PropTypes.string,\n    /**\n     * Redux function to set the search query as typed by user.\n     */\n    setSearchQuery: PropTypes.func.isRequired,\n    /**\n     * Currently set search Query from redux\n     */\n    searchQuery: PropTypes.string,\n    /**\n     * A map which gives the information about the remote about.\n     */\n    remoteAbout: PropTypes.object,\n    /**\n     * File system information and features about the current remote\n     */\n    fsInfo: PROP_FS_INFO,\n    /**\n     * Map of data to be passed to the doughnutChart.\n     */\n    doughnutData: PropTypes.object\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    const remoteAbout = state.providerStatus.about[ownProps.containerID];\n    let doughnutData = {};\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    if (currentPath && state.remote.configs && state.remote.configs[currentPath.remoteName]) {\n        fsInfo = state.remote.configs[currentPath.remoteName];\n    }\n\n    if (remoteAbout) {\n\n        let labels = [];\n        let data = [];\n\n        for (const [key, value] of Object.entries(remoteAbout)) {\n            if (key !== \"total\") {\n                labels.push(key);\n                data.push(bytesToGB(value).toFixed(2));\n            }\n        }\n        if (labels.length > 1 && data.length > 1) {\n            doughnutData = {\n                labels: labels, datasets: [\n                    {\n                        data: data,\n                        backgroundColor: [\n                            '#FF6384',\n                            '#36A2EB',\n                            '#FFCE56',\n                            '#ff7459',\n                        ],\n                        hoverBackgroundColor: [\n                            '#FF6384',\n                            '#36A2EB',\n                            '#FFCE56',\n                            '#ff7459',\n                        ],\n                    }\n                ]\n            };\n        }\n    }\n\n    return {\n        visibilityFilter: state.explorer.visibilityFilters[ownProps.containerID],\n        loadImages: state.explorer.loadImages[ownProps.containerID],\n        currentPath: state.explorer.currentPaths[ownProps.containerID],\n        gridMode: state.explorer.gridMode[ownProps.containerID],\n        searchQuery: state.explorer.searchQueries[ownProps.containerID],\n        fsInfo,\n        doughnutData\n\n    }\n};\n\n\nexport default connect(mapStateToProps, {\n    changeVisibilityFilter,\n    changeGridMode,\n    navigateBack,\n    navigateFwd,\n    getFilesForContainerID,\n    setSearchQuery,\n    getAbout,\n    setLoadImages\n})(FileOperations);","import axiosInstance from \"../utils/API/API\";\nimport {addColonAtLast, isLocalRemoteName} from \"../utils/Tools\";\nimport {GET_REMOTE_ABOUT, REQUEST_ERROR, REQUEST_SUCCESS} from \"../actions/types\";\nimport urls from \"../utils/API/endpoint\";\n\n/**\n * Gets the information of a provider\n * @param containerID\n * @returns {Function}\n */\nexport const getAbout = (containerID) => {\n    return (dispatch, getState) => {\n\n        const state = getState();\n        const currentPath = state.explorer.currentPaths[containerID];\n\n        let {remoteName} = currentPath;\n\n        if (remoteName) {\n            if (!isLocalRemoteName(remoteName)) {\n                remoteName = addColonAtLast(remoteName);\n            }\n\n            // Remove the previous data\n            dispatch({\n                type: GET_REMOTE_ABOUT,\n                status: REQUEST_SUCCESS,\n                id: containerID,\n                payload: {}\n            });\n\n            axiosInstance.post(urls.getAbout, {fs: remoteName})\n                .then((res) => {\n                    dispatch({\n                        type: GET_REMOTE_ABOUT,\n                        status: REQUEST_SUCCESS,\n                        id: containerID,\n                        payload: res.data\n                    })\n                }, (res) => {\n                    dispatch({\n                        type: GET_REMOTE_ABOUT,\n                        status: REQUEST_ERROR,\n                        id: containerID,\n                        error: res\n                    })\n                })\n        }\n    }\n};","import React from 'react';\nimport {Card, CardBody, CardHeader} from \"reactstrap\";\nimport RemotesList from \"../RemotesList\";\nimport FilesView from \"../FilesView/FilesView\";\nimport {addColonAtLast} from \"../../../utils/Tools\";\nimport {connect} from \"react-redux\";\nimport * as PropTypes from 'prop-types';\nimport {\n    changePath,\n    changeRemoteName,\n    changeRemotePath,\n    createPath,\n    navigateBack,\n    navigateFwd,\n    navigateUp\n} from \"../../../actions/explorerStateActions\";\nimport FileOperations from \"../../Base/FileOperations/FileOperations\";\nimport {PROP_CURRENT_PATH, PROP_FS_INFO} from \"../../../utils/RclonePropTypes\";\nimport ErrorBoundary from \"../../../ErrorHandling/ErrorBoundary\";\n\n\nclass RemoteExplorer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            remoteNameTemp: \"\"\n        };\n\n        this.updateRemoteName = this.updateRemoteName.bind(this);\n        this.updateRemotePath = this.updateRemotePath.bind(this);\n    }\n\n\n    updateRemoteName(remoteName) {\n        this.setState({remoteNameTemp: remoteName});\n    }\n\n    updateRemotePath(newRemotePath, IsDir, IsBucket) {\n        const {remoteName} = this.props.currentPath;\n\n        let updateRemoteName = \"\";\n        let updateRemotePath = \"\";\n\n        if (IsBucket) {\n            updateRemoteName = addColonAtLast(remoteName) + newRemotePath;\n            updateRemotePath = \"\";\n\n        } else if (IsDir) {\n            updateRemoteName = remoteName;\n            updateRemotePath = newRemotePath;\n        }\n        this.props.changePath(this.props.containerID, updateRemoteName, updateRemotePath);\n    }\n\n    render() {\n\n\n        const {remoteName} = this.props.currentPath;\n        const {containerID, distractionFreeMode} = this.props;\n\n        const isValidPath = remoteName && remoteName !== \"\";\n\n        return (\n            <ErrorBoundary>\n                {/*Render remotes array*/}\n                {(!distractionFreeMode) &&\n                <Card>\n                    <CardHeader>Remotes</CardHeader>\n                    <CardBody>\n                        <RemotesList\n                            remoteName={remoteName}\n                            containerID={containerID}\n                        />\n                    </CardBody>\n                </Card>\n                }\n\n                {/*Render the files in the selected remote*/}\n                {isValidPath && <Card>\n                    <CardHeader>\n                        <FileOperations containerID={containerID}/>\n                    </CardHeader>\n                    <CardBody>\n                        <FilesView containerID={containerID}/>\n                    </CardBody>\n                </Card>}\n\n            </ErrorBoundary>\n        );\n\n    }\n\n}\n\n\nconst propTypes = {\n\n    containerID: PropTypes.string.isRequired,\n    createPath: PropTypes.func.isRequired,\n    currentPath: PROP_CURRENT_PATH,\n    fsInfo: PROP_FS_INFO,\n    hasError: PropTypes.bool,\n    distractionFreeMode: PropTypes.bool.isRequired\n\n};\n\nconst defaultProps = {};\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const currentPath = state.explorer.currentPaths[ownProps.containerID];\n    let fsInfo = {};\n\n    const {remoteName} = currentPath;\n\n    if (currentPath && state.remote.configs) {\n\n        const tempRemoteName = remoteName.split(':')[0];\n        if (state.remote.configs[tempRemoteName])\n\n            fsInfo = state.remote.configs[tempRemoteName];\n    }\n    return {\n        configs: state.remote.configs,\n        hasError: state.remote.hasError,\n        error: state.remote.error,\n        currentPath: state.explorer.currentPaths[ownProps.containerID],\n        fsInfo\n    }\n};\n\nRemoteExplorer.propTypes = propTypes;\nRemoteExplorer.defaultProps = defaultProps;\n\nexport default connect(\n    mapStateToProps,\n    {\n        createPath, changePath,\n        changeRemoteName, changeRemotePath, navigateUp,\n        navigateBack, navigateFwd\n    }\n)(RemoteExplorer);\n","import React from \"react\";\nimport {Button, Card, CardBody, CardHeader, Col, Row} from \"reactstrap\";\nimport RemoteExplorer from \"../RemoteExplorer\";\n\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport {DragDropContext} from \"react-dnd\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {createPath} from \"../../../actions/explorerStateActions\";\nimport * as PropTypes from 'prop-types';\nimport {changeDistractionFreeMode, changeNumCols} from \"../../../actions/explorerActions\";\nimport ErrorBoundary from \"../../../ErrorHandling/ErrorBoundary\";\n\n\nfunction RemoteExplorerList({cols, distractionFreeMode}) {\n    let remoteExplorers = [];\n    const lgSize = 12 / cols;\n    for (let i = 0; i < cols; i++) {\n\n        remoteExplorers.push((\n            <Col xs={12} sm={12} md={lgSize} lg={lgSize} key={i}>\n\n                <RemoteExplorer containerID={i.toString()} distractionFreeMode={distractionFreeMode}/>\n            </Col>\n        ));\n    }\n    return remoteExplorers;\n}\n\nclass RemoteExplorerLayout extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.changeLayout = this.changeLayout.bind(this);\n    }\n\n    changeLayout = (nos, mode) => {\n        const {changeNumCols} = this.props;\n        // console.log(\"changing layout\");\n        if (mode === \"side\" && nos !== changeNumCols) {\n            changeNumCols(nos);\n        }\n    };\n\n    componentDidMount() {\n        //Load one explorer layout\n        const {numCols, changeNumCols} = this.props;\n\n        if (numCols < 1) {\n            changeNumCols(1);\n        }\n    }\n\n    toggleDistractionFreeMode = (e) => {\n        const {distractionFreeMode, changeDistractionFreeMode} = this.props;\n        // this.setState((prevState) => ({\n        //     distractionFreeMode: !prevState.distractionFreeMode\n        // }));\n        changeDistractionFreeMode(!distractionFreeMode);\n\n    };\n\n    render() {\n\n        /*Divide the 12 bootstrap columns to fit number of explorers*/\n        const {numCols, backStacks, distractionFreeMode} = this.props;\n\n        return (\n            <ErrorBoundary>\n                <Row className={\"d-none d-md-block\"} data-test=\"remoteExplorerLayout\">\n\n                    {distractionFreeMode && <div className=\"clearfix float-right\">\n                        <Button color={\"success\"} className={\"ml-2\"}\n                                onClick={this.toggleDistractionFreeMode}><i className=\"fa fa-arrows\"/></Button>\n                    </div>}\n\n                    {(!distractionFreeMode) &&\n                    <Col sm={12} lg={12}>\n                        <Card>\n\n                            <CardHeader>\n                                Choose Layout\n                            </CardHeader>\n                            <CardBody>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(1, \"side\")}>\n                                    1 - side by side\n                                </Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(2, \"side\")}>\n                                    2 - side by side\n                                </Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(3, \"side\")}>\n                                    3 - side by side\n                                </Button>\n                                <Button color={\"primary\"} className={\"ml-2\"}\n                                        onClick={() => this.changeLayout(4, \"side\")}>\n                                    4 - side by side\n                                </Button>\n                                <Button color={\"success\"} className={\"ml-2\"}\n                                        onClick={this.toggleDistractionFreeMode}><i className=\"fa fa-arrows\"/>\n                                </Button>\n                                {/*<Button onClick={this.changeLayout(4,\"grid\")}>4 - grid</Button>*/}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    }\n                </Row>\n\n\n                <Row>\n                    <RemoteExplorerList cols={numCols} backStacks={backStacks}\n                                        distractionFreeMode={distractionFreeMode}/>\n                </Row>\n\n\n            </ErrorBoundary>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    backStacks: state.explorer.backStacks,\n    numCols: state.remote.numCols,\n    distractionFreeMode: state.remote.distractionFreeMode\n});\n\nRemoteExplorerLayout.propTypes = {\n    backStacks: PropTypes.object.isRequired,\n    createPath: PropTypes.func.isRequired,\n    changeNumCols: PropTypes.func.isRequired,\n    distractionFreeMode: PropTypes.bool.isRequired\n};\n\nexport default compose(\n    connect(mapStateToProps, {createPath, changeNumCols, changeDistractionFreeMode}),\n    DragDropContext(HTML5Backend)\n)(RemoteExplorerLayout);"],"sourceRoot":""}