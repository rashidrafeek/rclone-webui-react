{"version":3,"sources":["actions/userActions.js","views/Pages/Login/Login.js"],"names":["changeUserNamePassword","userName","password","dispatch","type","CHANGE_AUTH_KEY","payload","authKey","btoa","CHANGE_AXIOS_INTERCEPTOR","changeIPAddress","ipAddress","CHANGE_IP_ADDRESS","removeParam","parameter","url","document","location","href","urlparts","split","length","urlBase","shift","queryString","join","prefix","encodeURIComponent","pars","i","lastIndexOf","splice","replace","window","origin","history","pushState","title","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeUserName","e","setState","username","target","value","connectionSuccess","changePassword","redirectToDashboard","push","onSubmit","preventDefault","_this$state","state","Promise","all","then","checkConnection","_this$state2","_this$props","axiosInstance","post","urls","noopAuth","data","console","log","error","indexOf","localStorage","clear","signOut","url_string","URL","loginToken","searchParams","get","changeAuthKey","_this$state3","react_default","a","createElement","className","data-test","Container","Row","Col","md","CardGroup","Card","CardBody","Form","UncontrolledAlert","color","children","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","placeholder","autoComplete","onChange","data-testid","xs","Button","disabled","onClick","style","width","Component","connect","SIGNOUT_REQUEST"],"mappings":"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","file":"static/js/3.05ef4fdb.chunk.js","sourcesContent":["import {CHANGE_AUTH_KEY, CHANGE_AXIOS_INTERCEPTOR, CHANGE_IP_ADDRESS, SIGNOUT_REQUEST} from \"./types\";\n\n/**\n * Sign out the current user and delete the redux cache\n * @returns {Function}\n */\nexport const signOut = () => dispatch => {\n    dispatch({\n        type: SIGNOUT_REQUEST\n    })\n};\n\n/**\n * Set new username and password for the rclone auth.\n * @param userName      {string}    New username to change.\n * @param password      {string}    New Password to change.\n * @returns             {Function}\n */\nexport const changeUserNamePassword = (userName, password) => dispatch => {\n    dispatch({\n        type: CHANGE_AUTH_KEY,\n        payload: {authKey: btoa(userName + \":\" + password)}\n    });\n    dispatch({\n        type: CHANGE_AXIOS_INTERCEPTOR\n    });\n};\n\nexport const changeAuthKey = (authKey) => dispatch => {\n    dispatch({\n        type: CHANGE_AUTH_KEY,\n        payload: {authKey: authKey}\n    });\n    dispatch({\n        type: CHANGE_AXIOS_INTERCEPTOR\n    });\n};\n\n/**\n * Change the IPAddress of the rclone backend.\n * @param ipAddress\n * @returns {Function}\n */\nexport const changeIPAddress = (ipAddress) => dispatch => {\n    dispatch({\n        type: CHANGE_IP_ADDRESS,\n        payload: {ipAddress}\n    });\n    dispatch({\n        type: CHANGE_AXIOS_INTERCEPTOR\n    });\n};\n\n\n","import React, {Component} from 'react';\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardGroup,\n    Col,\n    Container,\n    Form,\n    Input,\n    InputGroup,\n    InputGroupAddon,\n    InputGroupText,\n    Row,\n    UncontrolledAlert\n} from 'reactstrap';\nimport {connect} from \"react-redux\";\nimport {changeAuthKey, changeIPAddress, changeUserNamePassword, signOut} from \"../../../actions/userActions\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport urls from \"../../../utils/API/endpoint\";\n\n\nfunction removeParam(parameter) {\n    let url = document.location.href;\n    let urlparts = url.split('?');\n\n    if (urlparts.length >= 2) {\n        let urlBase = urlparts.shift();\n        let queryString = urlparts.join(\"?\");\n\n        let prefix = encodeURIComponent(parameter) + '=';\n        let pars = queryString.split(/[&;]/g);\n        for (let i = pars.length; i-- > 0;)\n            if (pars[i].lastIndexOf(prefix, 0) !== -1)\n                pars.splice(i, 1);\n        if (pars.length > 0)\n            url = urlBase + '?' + pars.join('&');\n        else\n            url = urlBase;\n        url = url.replace(window.location.origin, ''); // history.pushState requires same-origin\n        window.history.pushState('', document.title, url); // added this line to push the new url directly to url bar .\n\n    }\n    return url;\n}\n\nclass Login extends Component {\n\n    constructor(props) {\n        super(props);\n        let ipAddress = window.location.href.split(\"#/\")[0];\n        if (ipAddress.indexOf(\"?\") !== -1)\n            ipAddress = window.location.href.split(\"?\")[0];\n        // if (localStorage.getItem(IP_ADDRESS_KEY))\n        //     ipAddress = localStorage.getItem(IP_ADDRESS_KEY);\n        this.state = {\n            username: \"\",\n            password: \"\",\n            ipAddress,\n            connectionSuccess: false,\n            error: \"\"\n        };\n    }\n\n    changeUserName = e => {\n        this.setState({\n            username: e.target.value,\n            connectionSuccess: false\n        });\n    };\n    changePassword = e => {\n        this.setState({\n            password: e.target.value,\n            connectionSuccess: false\n\n        })\n    };\n    changeIPAddress = e => {\n\n        this.setState({\n            ipAddress: e.target.value,\n            connectionSuccess: false\n        });\n    };\n\n    redirectToDashboard = () => {\n        this.props.history.push('/dashboard');\n    };\n\n\n    onSubmit = e => {\n        if (e)\n            e.preventDefault();\n\n        const {ipAddress, username, password} = this.state;\n\n        Promise.all([\n            changeUserNamePassword(username, password),\n            changeIPAddress(ipAddress)\n        ]).then(() => {\n            this.redirectToDashboard()\n        });\n\n    };\n\n    checkConnection = (e) => {\n        e.preventDefault();\n\n        // Set the localStorage parameters temporarily.\n        const {ipAddress, username, password} = this.state;\n        const {changeUserNamePassword, changeIPAddress} = this.props;\n\n        Promise.all([\n            changeUserNamePassword(username, password),\n            changeIPAddress(ipAddress)\n        ]).then(() => {\n            axiosInstance.post(urls.noopAuth).then((data) => {\n                console.log(\"Connection successful.\");\n                this.setState({\n                    connectionSuccess: true,\n                    error: \"\"\n                })\n            }, (error) => {\n                console.log(error);\n                this.setState({\n                    connectionSuccess: false,\n                    error: \"Error connecting. Please check username password and verify if rclone is working at the specified IP.\"\n                })\n            })\n        })\n\n\n    };\n\n    componentDidMount() {\n        localStorage.clear();\n        this.props.signOut();\n\n\n        let url_string = window.location.href;\n        let url = new URL(url_string);\n        let loginToken = url.searchParams.get(\"login_token\");\n        let ipAddress = this.state.ipAddress;\n        if (url.searchParams.get(\"ip_address\")) {\n            ipAddress = url.searchParams.get(\"ip_address\");\n        }\n        // console.log(loginToken);\n        // If login token is present in url, process that.\n        if (loginToken) {\n            Promise.all([\n                this.props.changeAuthKey(loginToken),\n                this.props.changeIPAddress(ipAddress)\n            ]);\n            removeParam(\"login_token\");\n            removeParam(\"ip_address\");\n            this.redirectToDashboard();\n        }\n    }\n\n\n    render() {\n        const {username, password, ipAddress, connectionSuccess, error} = this.state;\n\n        return (\n            <div className=\"app flex-row align-items-center\" data-test=\"loginComponent\">\n                <Container>\n                    <Row className=\"justify-content-center\">\n                        <Col md=\"8\">\n                            <CardGroup>\n                                <Card className=\"p-4\">\n                                    <CardBody>\n                                        <Form onSubmit={this.onSubmit}>\n                                            <h1>Login</h1>\n                                            <p className=\"text-muted\">Sign In to your account</p>\n                                            {error && <UncontrolledAlert color=\"danger\" children={error}/>}\n                                            {connectionSuccess && <UncontrolledAlert color=\"success\"\n                                                                                     children={\"Connection verified. You may now login.\"}/>}\n                                            <InputGroup className=\"mb-3\">\n                                                <InputGroupAddon addonType=\"prepend\">\n                                                    <InputGroupText>\n                                                        <i className=\"icon-user\"></i>\n                                                    </InputGroupText>\n                                                </InputGroupAddon>\n                                                <Input type=\"text\" placeholder=\"IP Address / URL\"\n                                                       autoComplete=\"ipAddress\"\n                                                       onChange={this.changeIPAddress} value={ipAddress}\n                                                       data-testid=\"LoginForm-ipAddress\"/>\n                                            </InputGroup>\n                                            <InputGroup className=\"mb-3\">\n                                                <InputGroupAddon addonType=\"prepend\">\n                                                    <InputGroupText>\n                                                        <i className=\"icon-user\"></i>\n                                                    </InputGroupText>\n                                                </InputGroupAddon>\n                                                <Input type=\"text\" placeholder=\"Username\" autoComplete=\"username\"\n                                                       data-testid=\"LoginForm-userName\"\n                                                       onChange={this.changeUserName} value={username}/>\n                                            </InputGroup>\n                                            <InputGroup className=\"mb-4\">\n                                                <InputGroupAddon addonType=\"prepend\">\n                                                    <InputGroupText>\n                                                        <i className=\"icon-lock\"></i>\n                                                    </InputGroupText>\n                                                </InputGroupAddon>\n                                                <Input type=\"password\" placeholder=\"Password\"\n                                                       data-testid=\"LoginForm-password\"\n                                                       autoComplete=\"current-password\" onChange={this.changePassword}\n                                                       value={password}/>\n                                            </InputGroup>\n                                            <Row>\n                                                <Col xs=\"6\">\n                                                    <Button color=\"primary\" className=\"px-4\"\n                                                            data-testid=\"LoginForm-BtnLogin\"\n                                                            disabled={!connectionSuccess}>Login</Button>\n                                                </Col>\n                                                <Col xs=\"6\" className=\"text-right\">\n                                                    <Button onClick={this.checkConnection} color=\"primary\"\n                                                            data-testid=\"LoginForm-BtnVerify\"\n                                                            className=\"px-4\">Verify</Button>\n                                                </Col>\n                                            </Row>\n                                        </Form>\n                                    </CardBody>\n                                </Card>\n                                <Card className=\"text-white bg-primary py-5 d-md-down-none\" style={{width: '44%'}}>\n                                    <CardBody className=\"text-center\">\n                                        <div>\n                                        </div>\n                                    </CardBody>\n                                </Card>\n                            </CardGroup>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\n\nexport default connect(null, {signOut, changeUserNamePassword, changeIPAddress, changeAuthKey})(Login);\n"],"sourceRoot":""}